[
  {
    "index": 0,
    "prompt": "In all applications, the bank is required to create at least one offer.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Complete, A_Cancelled, O_Sent (mail and online), A_Accepted, A_Submitted, A_Denied, A_Validating, A_Pending, O_Create Offer, O_Sent (online only), O_Accepted, A_Incomplete"
      },
      {
        "role": "user",
        "content": "In all applications, the bank is required to create at least one offer."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"O_Create Offer\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"O_Create Offer\"]]\n    }\n  ]\n}"
  },
  {
    "index": 1,
    "prompt": "An application cannot be submitted more than once.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Complete, A_Cancelled, O_Sent (mail and online), A_Accepted, A_Submitted, A_Denied, A_Validating, A_Pending, O_Create Offer, O_Sent (online only), O_Accepted, A_Incomplete"
      },
      {
        "role": "user",
        "content": "An application cannot be submitted more than once."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"A_Submitted\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"A_Submitted\"]]\n    }\n  ]\n}"
  },
  {
    "index": 2,
    "prompt": "Pending status of an application means that the application is approved and it cannot occur multiple times.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Complete, A_Cancelled, O_Sent (mail and online), A_Accepted, A_Submitted, A_Denied, A_Validating, A_Pending, O_Create Offer, O_Sent (online only), O_Accepted, A_Incomplete"
      },
      {
        "role": "user",
        "content": "Pending status of an application means that the application is approved and it cannot occur multiple times."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"A_Pending\"]]\n    },\n    {\n      \"template\": \"RespondedExistence\",\n      \"parameters\": [[\"A_Pending\"], [\"A_Accepted\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"A_Pending\"]]\n    },\n    {\n      \"template\": \"RespondedExistence\",\n      \"parameters\": [[\"A_Pending\"], [\"A_Accepted\"]]\n    }\n  ]\n}"
  },
  {
    "index": 3,
    "prompt": "Pending and cancelled status cannot occur at the same time.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Complete, A_Cancelled, O_Sent (mail and online), A_Accepted, A_Submitted, A_Denied, A_Validating, A_Pending, O_Create Offer, O_Sent (online only), O_Accepted, A_Incomplete"
      },
      {
        "role": "user",
        "content": "Pending and cancelled status cannot occur at the same time."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Pending\"], [\"A_Cancelled\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Pending\"], [\"A_Cancelled\"]]\n    }\n  ]\n}"
  },
  {
    "index": 4,
    "prompt": "Cancellation and denial of an application are final outcomes, and only one of them can occur for an individual.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Complete, A_Cancelled, O_Sent (mail and online), A_Accepted, A_Submitted, A_Denied, A_Validating, A_Pending, O_Create Offer, O_Sent (online only), O_Accepted, A_Incomplete"
      },
      {
        "role": "user",
        "content": "Cancellation and denial of an application are final outcomes, and only one of them can occur for an individual."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"A_Cancelled\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"A_Denied\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Cancelled\"], [\"A_Denied\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"A_Cancelled\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"A_Denied\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Cancelled\"], [\"A_Denied\"]]\n    }\n  ]\n}"
  },
  {
    "index": 5,
    "prompt": "An offer can be sent either online only or both online and via mail.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Complete, A_Cancelled, O_Sent (mail and online), A_Accepted, A_Submitted, A_Denied, A_Validating, A_Pending, O_Create Offer, O_Sent (online only), O_Accepted, A_Incomplete"
      },
      {
        "role": "user",
        "content": "An offer can be sent either online only or both online and via mail."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"O_Sent (mail and online)\"], [\"O_Sent (online only)\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"O_Sent (mail and online)\"], [\"O_Sent (online only)\"]]\n    }\n  ]\n}"
  },
  {
    "index": 6,
    "prompt": "It is not allowed to create an offer after an application is cancelled.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Complete, A_Cancelled, O_Sent (mail and online), A_Accepted, A_Submitted, A_Denied, A_Validating, A_Pending, O_Create Offer, O_Sent (online only), O_Accepted, A_Incomplete"
      },
      {
        "role": "user",
        "content": "It is not allowed to create an offer after an application is cancelled."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"A_Cancelled\"], [\"O_Create Offer\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"A_Cancelled\"], [\"O_Create Offer\"]]\n    }\n  ]\n}"
  },
  {
    "index": 7,
    "prompt": "We cannot accept an application after it has been completed.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Complete, A_Cancelled, O_Sent (mail and online), A_Accepted, A_Submitted, A_Denied, A_Validating, A_Pending, O_Create Offer, O_Sent (online only), O_Accepted, A_Incomplete"
      },
      {
        "role": "user",
        "content": "We cannot accept an application after it has been completed."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"A_Complete\"], [\"A_Accepted\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"A_Complete\"], [\"A_Accepted\"]]\n    }\n  ]\n}"
  },
  {
    "index": 8,
    "prompt": "If an application is in pending, there must be an accepted offer beforehand.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Complete, A_Cancelled, O_Sent (mail and online), A_Accepted, A_Submitted, A_Denied, A_Validating, A_Pending, O_Create Offer, O_Sent (online only), O_Accepted, A_Incomplete"
      },
      {
        "role": "user",
        "content": "If an application is in pending, there must be an accepted offer beforehand."
      },
      {
        "role": "assistant",
        "content": "{\"constraints\":[{\"template\":\"Precedence\",\"parameters\":[[\"O_Accepted\"],[\"A_Pending\"]]}]}"
      }
    ],
    "response": "{\"constraints\":[{\"template\":\"Precedence\",\"parameters\":[[\"O_Accepted\"],[\"A_Pending\"]]}]}"
  },
  {
    "index": 9,
    "prompt": "We cannot have an incomplete status for an application without validating it first.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Complete, A_Cancelled, O_Sent (mail and online), A_Accepted, A_Submitted, A_Denied, A_Validating, A_Pending, O_Create Offer, O_Sent (online only), O_Accepted, A_Incomplete"
      },
      {
        "role": "user",
        "content": "We cannot have an incomplete status for an application without validating it first."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"A_Validating\"], [\"A_Incomplete\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"A_Validating\"], [\"A_Incomplete\"]]\n    }\n  ]\n}"
  },
  {
    "index": 10,
    "prompt": "Making a decision is a mandatory action in this process.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nbegin editing, revoke decision, mail income, calculate, begin payment, abort payment, mail valid, finish payment, insert document, withdraw, decide"
      },
      {
        "role": "user",
        "content": "Making a decision is a mandatory action in this process."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"decide\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"decide\"]]\n    }\n  ]\n}"
  },
  {
    "index": 11,
    "prompt": "Withdrawing the case cannot occur more than once.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nbegin editing, revoke decision, mail income, calculate, begin payment, abort payment, mail valid, finish payment, insert document, withdraw, decide"
      },
      {
        "role": "user",
        "content": "Withdrawing the case cannot occur more than once."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"withdraw\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"withdraw\"]]\n    }\n  ]\n}"
  },
  {
    "index": 12,
    "prompt": "Mail income and mail valid both must coexist in all individual applications.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nbegin editing, revoke decision, mail income, calculate, begin payment, abort payment, mail valid, finish payment, insert document, withdraw, decide"
      },
      {
        "role": "user",
        "content": "Mail income and mail valid both must coexist in all individual applications."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"mail income\"], [\"mail valid\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"mail income\"], [\"mail valid\"]]\n    }\n  ]\n}"
  },
  {
    "index": 13,
    "prompt": "Only one of the activities withdrawal and revoke decision can occur in a case.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nbegin editing, revoke decision, mail income, calculate, begin payment, abort payment, mail valid, finish payment, insert document, withdraw, decide"
      },
      {
        "role": "user",
        "content": "Only one of the activities withdrawal and revoke decision can occur in a case."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"withdraw\"], [\"revoke decision\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"withdraw\"], [\"revoke decision\"]]\n    }\n  ]\n}"
  },
  {
    "index": 14,
    "prompt": "The farmers cannot revoke the decision after the payment is finished.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nbegin editing, revoke decision, mail income, calculate, begin payment, abort payment, mail valid, finish payment, insert document, withdraw, decide"
      },
      {
        "role": "user",
        "content": "The farmers cannot revoke the decision after the payment is finished."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"finish payment\"], [\"revoke decision\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"finish payment\"], [\"revoke decision\"]]\n    }\n  ]\n}"
  },
  {
    "index": 15,
    "prompt": "We cannot begin editing when a decision is made.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nbegin editing, revoke decision, mail income, calculate, begin payment, abort payment, mail valid, finish payment, insert document, withdraw, decide"
      },
      {
        "role": "user",
        "content": "We cannot begin editing when a decision is made."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"decide\"], [\"begin editing\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"decide\"], [\"begin editing\"]]\n    }\n  ]\n}"
  },
  {
    "index": 16,
    "prompt": "It is not possible to revoke a decision without making a decision first.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nbegin editing, revoke decision, mail income, calculate, begin payment, abort payment, mail valid, finish payment, insert document, withdraw, decide"
      },
      {
        "role": "user",
        "content": "It is not possible to revoke a decision without making a decision first."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"decide\"], [\"revoke decision\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"decide\"], [\"revoke decision\"]]\n    }\n  ]\n}"
  },
  {
    "index": 17,
    "prompt": "If documents are inserted, payment should also begin in each case.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nbegin editing, revoke decision, mail income, calculate, begin payment, abort payment, mail valid, finish payment, insert document, withdraw, decide"
      },
      {
        "role": "user",
        "content": "If documents are inserted, payment should also begin in each case."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"RespondedExistence\",\n      \"parameters\": [[\"insert document\"], [\"begin payment\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"RespondedExistence\",\n      \"parameters\": [[\"insert document\"], [\"begin payment\"]]\n    }\n  ]\n}"
  },
  {
    "index": 18,
    "prompt": "Any mail income should be followed by some calculations.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nbegin editing, revoke decision, mail income, calculate, begin payment, abort payment, mail valid, finish payment, insert document, withdraw, decide"
      },
      {
        "role": "user",
        "content": "Any mail income should be followed by some calculations."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"mail income\"], [\"calculate\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"mail income\"], [\"calculate\"]]\n    }\n  ]\n}"
  },
  {
    "index": 19,
    "prompt": "If a payment is aborted, it should be finished at some point after it.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nbegin editing, revoke decision, mail income, calculate, begin payment, abort payment, mail valid, finish payment, insert document, withdraw, decide"
      },
      {
        "role": "user",
        "content": "If a payment is aborted, it should be finished at some point after it."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"abort payment\"], [\"finish payment\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"abort payment\"], [\"finish payment\"]]\n    }\n  ]\n}"
  },
  {
    "index": 20,
    "prompt": "We cannot have any application without a receive claim event.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "We cannot have any application without a receive claim event."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"Receive Claim\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"Receive Claim\"]]\n    }\n  ]\n}"
  },
  {
    "index": 21,
    "prompt": "We cannot have multiple rejections for a single claim.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "We cannot have multiple rejections for a single claim."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"Reject Claim\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"Reject Claim\"]]\n    }\n  ]\n}"
  },
  {
    "index": 22,
    "prompt": "First type of receive objection and repayment always occur together in a claim.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "First type of receive objection and repayment always occur together in a claim."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"Receive objection 1\"], [\"Repayment\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"Receive objection 1\"], [\"Repayment\"]]\n    }\n  ]\n}"
  },
  {
    "index": 23,
    "prompt": "One claim can be either accepted or rejected.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "One claim can be either accepted or rejected."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"Accept Claim\"], [\"Reject Claim\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"Accept Claim\"], [\"Reject Claim\"]]\n    }\n  ]\n}"
  },
  {
    "index": 24,
    "prompt": "First and second blocking mechanisms cannot occur together.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "First and second blocking mechanisms cannot occur together."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"Block Claim 1\"], [\"Block Claim 2\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"Block Claim 1\"], [\"Block Claim 2\"]]\n    }\n  ]\n}"
  },
  {
    "index": 25,
    "prompt": "No payment can be orderd after a repayment.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "No payment can be orderd after a repayment."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"Repayment\"], [\"Payment Order\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"Repayment\"], [\"Payment Order\"]]\n    }\n  ]\n}"
  },
  {
    "index": 26,
    "prompt": "We cannot execute a payment without first placing an order for the payment.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "We cannot execute a payment without first placing an order for the payment."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Payment Order\"], [\"Execute Payment\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Payment Order\"], [\"Execute Payment\"]]\n    }\n  ]\n}"
  },
  {
    "index": 27,
    "prompt": "Correction of claims is only possible if the claim is already blocked with the first blocking mechanism.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "Correction of claims is only possible if the claim is already blocked with the first blocking mechanism."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Block Claim 1\"], [\"Correct Claim\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Block Claim 1\"], [\"Correct Claim\"]]\n    }\n  ]\n}"
  },
  {
    "index": 28,
    "prompt": "If a claim is withdrawn, it should be blocked with mechanism 3 as well.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "If a claim is withdrawn, it should be blocked with mechanism 3 as well."
      },
      {
        "role": "assistant",
        "content": "{\"constraints\":[{\"template\":\"Response\",\"parameters\":[[\"Withdraw Claim\"],[\"Block Claim 3\"]]}]}"
      }
    ],
    "response": "{\"constraints\":[{\"template\":\"Response\",\"parameters\":[[\"Withdraw Claim\"],[\"Block Claim 3\"]]}]}"
  },
  {
    "index": 29,
    "prompt": "All the accepted claims should have a payment order afterward.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "All the accepted claims should have a payment order afterward."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"Accept Claim\"], [\"Payment Order\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"Accept Claim\"], [\"Payment Order\"]]\n    }\n  ]\n}"
  },
  {
    "index": 30,
    "prompt": "If a claim is unblocked with type three, then a payment order must occur afterward.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "If a claim is unblocked with type three, then a payment order must occur afterward."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"Unblock Claim 3\"], [\"Payment Order\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"Unblock Claim 3\"], [\"Payment Order\"]]\n    }\n  ]\n}"
  },
  {
    "index": 31,
    "prompt": "Creating an offer is a mandatory step in the loan application process.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Complete, A_Cancelled, O_Sent (mail and online), A_Accepted, A_Submitted, A_Denied, A_Validating, A_Pending, O_Create Offer, O_Sent (online only), O_Accepted, A_Incomplete"
      },
      {
        "role": "user",
        "content": "Creating an offer is a mandatory step in the loan application process."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"O_Create Offer\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"O_Create Offer\"]]\n    }\n  ]\n}"
  },
  {
    "index": 32,
    "prompt": "Submitting an application cannot occur multiple times.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Complete, A_Cancelled, O_Sent (mail and online), A_Accepted, A_Submitted, A_Denied, A_Validating, A_Pending, O_Create Offer, O_Sent (online only), O_Accepted, A_Incomplete"
      },
      {
        "role": "user",
        "content": "Submitting an application cannot occur multiple times."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"A_Submitted\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"A_Submitted\"]]\n    }\n  ]\n}"
  },
  {
    "index": 33,
    "prompt": "We may have a maximum of one application pending event.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Complete, A_Cancelled, O_Sent (mail and online), A_Accepted, A_Submitted, A_Denied, A_Validating, A_Pending, O_Create Offer, O_Sent (online only), O_Accepted, A_Incomplete"
      },
      {
        "role": "user",
        "content": "We may have a maximum of one application pending event."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"A_Pending\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"A_Pending\"]]\n    }\n  ]\n}"
  },
  {
    "index": 34,
    "prompt": "One application can have only one of the outcomes: pending or cancelled.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Complete, A_Cancelled, O_Sent (mail and online), A_Accepted, A_Submitted, A_Denied, A_Validating, A_Pending, O_Create Offer, O_Sent (online only), O_Accepted, A_Incomplete"
      },
      {
        "role": "user",
        "content": "One application can have only one of the outcomes: pending or cancelled."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Pending\"], [\"A_Cancelled\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Pending\"], [\"A_Cancelled\"]]\n    }\n  ]\n}"
  },
  {
    "index": 35,
    "prompt": "An application can either be cancelled or denied.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Complete, A_Cancelled, O_Sent (mail and online), A_Accepted, A_Submitted, A_Denied, A_Validating, A_Pending, O_Create Offer, O_Sent (online only), O_Accepted, A_Incomplete"
      },
      {
        "role": "user",
        "content": "An application can either be cancelled or denied."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Cancelled\"], [\"A_Denied\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Cancelled\"], [\"A_Denied\"]]\n    }\n  ]\n}"
  },
  {
    "index": 36,
    "prompt": "There are two mutually exclusive procedures for sending offers such that including one excludes the other: 1) via mail and online, and 2) online only. ",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Complete, A_Cancelled, O_Sent (mail and online), A_Accepted, A_Submitted, A_Denied, A_Validating, A_Pending, O_Create Offer, O_Sent (online only), O_Accepted, A_Incomplete"
      },
      {
        "role": "user",
        "content": "There are two mutually exclusive procedures for sending offers such that including one excludes the other: 1) via mail and online, and 2) online only. "
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"O_Sent (mail and online)\"], [\"O_Sent (online only)\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"O_Sent (mail and online)\"], [\"O_Sent (online only)\"]]\n    }\n  ]\n}"
  },
  {
    "index": 37,
    "prompt": "When an application is cancelled, no more offer should be created for this application.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Complete, A_Cancelled, O_Sent (mail and online), A_Accepted, A_Submitted, A_Denied, A_Validating, A_Pending, O_Create Offer, O_Sent (online only), O_Accepted, A_Incomplete"
      },
      {
        "role": "user",
        "content": "When an application is cancelled, no more offer should be created for this application."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"A_Cancelled\"], [\"O_Create Offer\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"A_Cancelled\"], [\"O_Create Offer\"]]\n    }\n  ]\n}"
  },
  {
    "index": 38,
    "prompt": "Acceptance of an application never occurs after the completion of the application.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Complete, A_Cancelled, O_Sent (mail and online), A_Accepted, A_Submitted, A_Denied, A_Validating, A_Pending, O_Create Offer, O_Sent (online only), O_Accepted, A_Incomplete"
      },
      {
        "role": "user",
        "content": "Acceptance of an application never occurs after the completion of the application."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"A_Complete\"], [\"A_Accepted\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"A_Complete\"], [\"A_Accepted\"]]\n    }\n  ]\n}"
  },
  {
    "index": 39,
    "prompt": "All pending applications must be preceded by an accepted offer.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Complete, A_Cancelled, O_Sent (mail and online), A_Accepted, A_Submitted, A_Denied, A_Validating, A_Pending, O_Create Offer, O_Sent (online only), O_Accepted, A_Incomplete"
      },
      {
        "role": "user",
        "content": "All pending applications must be preceded by an accepted offer."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"O_Accepted\"], [\"A_Pending\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"O_Accepted\"], [\"A_Pending\"]]\n    }\n  ]\n}"
  },
  {
    "index": 40,
    "prompt": "Any application incomplete event must be proceeded by the validation of the application.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Complete, A_Cancelled, O_Sent (mail and online), A_Accepted, A_Submitted, A_Denied, A_Validating, A_Pending, O_Create Offer, O_Sent (online only), O_Accepted, A_Incomplete"
      },
      {
        "role": "user",
        "content": "Any application incomplete event must be proceeded by the validation of the application."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"A_Validating\"], [\"A_Incomplete\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"A_Validating\"], [\"A_Incomplete\"]]\n    }\n  ]\n}"
  },
  {
    "index": 41,
    "prompt": "We cannot have cases without a decision.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nbegin editing, revoke decision, mail income, calculate, begin payment, abort payment, mail valid, finish payment, insert document, withdraw, decide"
      },
      {
        "role": "user",
        "content": "We cannot have cases without a decision."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"decide\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"decide\"]]\n    }\n  ]\n}"
  },
  {
    "index": 42,
    "prompt": "Each application can be withdrawn a maximum of one time.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nbegin editing, revoke decision, mail income, calculate, begin payment, abort payment, mail valid, finish payment, insert document, withdraw, decide"
      },
      {
        "role": "user",
        "content": "Each application can be withdrawn a maximum of one time."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"withdraw\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"withdraw\"]]\n    }\n  ]\n}"
  },
  {
    "index": 43,
    "prompt": "The activities mail valid and mail income occur together in all cases.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nbegin editing, revoke decision, mail income, calculate, begin payment, abort payment, mail valid, finish payment, insert document, withdraw, decide"
      },
      {
        "role": "user",
        "content": "The activities mail valid and mail income occur together in all cases."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"mail valid\"], [\"mail income\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"mail valid\"], [\"mail income\"]]\n    }\n  ]\n}"
  },
  {
    "index": 44,
    "prompt": "We cannot have both revoking a decision and withdrawal of the application in one case.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nbegin editing, revoke decision, mail income, calculate, begin payment, abort payment, mail valid, finish payment, insert document, withdraw, decide"
      },
      {
        "role": "user",
        "content": "We cannot have both revoking a decision and withdrawal of the application in one case."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"revoke decision\"], [\"withdraw\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"revoke decision\"], [\"withdraw\"]]\n    }\n  ]\n}"
  },
  {
    "index": 45,
    "prompt": "Revoking a decision after finalizing the payment is not allowed.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nbegin editing, revoke decision, mail income, calculate, begin payment, abort payment, mail valid, finish payment, insert document, withdraw, decide"
      },
      {
        "role": "user",
        "content": "Revoking a decision after finalizing the payment is not allowed."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"finish payment\"], [\"revoke decision\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"finish payment\"], [\"revoke decision\"]]\n    }\n  ]\n}"
  },
  {
    "index": 46,
    "prompt": "Begin edition should not be permitted after making a decision.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nbegin editing, revoke decision, mail income, calculate, begin payment, abort payment, mail valid, finish payment, insert document, withdraw, decide"
      },
      {
        "role": "user",
        "content": "Begin edition should not be permitted after making a decision."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"decide\"], [\"begin editing\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"decide\"], [\"begin editing\"]]\n    }\n  ]\n}"
  },
  {
    "index": 47,
    "prompt": "In order to have revoking of a decision, it is necessary to have a decision made in the process.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nbegin editing, revoke decision, mail income, calculate, begin payment, abort payment, mail valid, finish payment, insert document, withdraw, decide"
      },
      {
        "role": "user",
        "content": "In order to have revoking of a decision, it is necessary to have a decision made in the process."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"decide\"], [\"revoke decision\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"decide\"], [\"revoke decision\"]]\n    }\n  ]\n}"
  },
  {
    "index": 48,
    "prompt": "Inserting documents in an application implies that payment has begun before or will begin after it.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nbegin editing, revoke decision, mail income, calculate, begin payment, abort payment, mail valid, finish payment, insert document, withdraw, decide"
      },
      {
        "role": "user",
        "content": "Inserting documents in an application implies that payment has begun before or will begin after it."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"RespondedExistence\",\n      \"parameters\": [[\"insert document\"], [\"begin payment\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"RespondedExistence\",\n      \"parameters\": [[\"insert document\"], [\"begin payment\"]]\n    }\n  ]\n}"
  },
  {
    "index": 49,
    "prompt": "If mail income is recorded, we should have calculations at some point after it.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nbegin editing, revoke decision, mail income, calculate, begin payment, abort payment, mail valid, finish payment, insert document, withdraw, decide"
      },
      {
        "role": "user",
        "content": "If mail income is recorded, we should have calculations at some point after it."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"mail income\"], [\"calculate\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"mail income\"], [\"calculate\"]]\n    }\n  ]\n}"
  },
  {
    "index": 50,
    "prompt": "Aborting a payment should be followed by finish editing.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nbegin editing, revoke decision, mail income, calculate, begin payment, abort payment, mail valid, finish payment, insert document, withdraw, decide"
      },
      {
        "role": "user",
        "content": "Aborting a payment should be followed by finish editing."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"abort payment\"], [\"finish payment\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"abort payment\"], [\"finish payment\"]]\n    }\n  ]\n}"
  },
  {
    "index": 51,
    "prompt": "All the claims must be received first.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "All the claims must be received first."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"Receive Claim\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Block Claim 3\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Block Claim 1\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Block Claim 2\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Unblock Claim 3\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Accept Claim\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Receive objection 1\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Payment Order\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Reject Claim\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Execute Payment\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Correct Claim\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Repayment\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Withdraw Claim\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"Receive Claim\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Block Claim 3\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Block Claim 1\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Block Claim 2\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Unblock Claim 3\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Accept Claim\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Receive objection 1\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Payment Order\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Reject Claim\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Execute Payment\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Correct Claim\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Repayment\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Withdraw Claim\"]]\n    }\n  ]\n}"
  },
  {
    "index": 52,
    "prompt": "Rejection of a claim may occur at most once.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "Rejection of a claim may occur at most once."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"Reject Claim\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"Reject Claim\"]]\n    }\n  ]\n}"
  },
  {
    "index": 53,
    "prompt": "It is not possible to have claims with only repayment or only receiving an objection from the first type.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "It is not possible to have claims with only repayment or only receiving an objection from the first type."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"Repayment\"], [\"Receive objection 1\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"Repayment\"], [\"Receive objection 1\"]]\n    }\n  ]\n}"
  },
  {
    "index": 54,
    "prompt": "We cannot have claims that are both accepted and rejected.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "We cannot have claims that are both accepted and rejected."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"Accept Claim\"], [\"Reject Claim\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"Accept Claim\"], [\"Reject Claim\"]]\n    }\n  ]\n}"
  },
  {
    "index": 55,
    "prompt": "A claim may have block claim 1 or 2, but not both of them.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "A claim may have block claim 1 or 2, but not both of them."
      },
      {
        "role": "assistant",
        "content": "{\"constraints\":[{\"template\":\"NotCoExistence\",\"parameters\":[[\"Block Claim 1\"],[\"Block Claim 2\"]]}]}"
      }
    ],
    "response": "{\"constraints\":[{\"template\":\"NotCoExistence\",\"parameters\":[[\"Block Claim 1\"],[\"Block Claim 2\"]]}]}"
  },
  {
    "index": 56,
    "prompt": "After repaying the received benefits, there should be no payment order.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "After repaying the received benefits, there should be no payment order."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"Repayment\"], [\"Payment Order\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"Repayment\"], [\"Payment Order\"]]\n    }\n  ]\n}"
  },
  {
    "index": 57,
    "prompt": "All executions of payments must be preceded by a payment order.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "All executions of payments must be preceded by a payment order."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Payment Order\"], [\"Execute Payment\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Payment Order\"], [\"Execute Payment\"]]\n    }\n  ]\n}"
  },
  {
    "index": 58,
    "prompt": "All claim corrections must be preceded by a block claim 1.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "All claim corrections must be preceded by a block claim 1."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Block Claim 1\"], [\"Correct Claim\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Block Claim 1\"], [\"Correct Claim\"]]\n    }\n  ]\n}"
  },
  {
    "index": 59,
    "prompt": "Occurrence of withdraw claim is allowed only if block claim 3 also exists.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "Occurrence of withdraw claim is allowed only if block claim 3 also exists."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"RespondedExistence\",\n      \"parameters\": [[\"Withdraw Claim\"], [\"Block Claim 3\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"RespondedExistence\",\n      \"parameters\": [[\"Withdraw Claim\"], [\"Block Claim 3\"]]\n    }\n  ]\n}"
  },
  {
    "index": 60,
    "prompt": "The model allows for ordering a payment without accepting the claim; that is not possible.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "The model allows for ordering a payment without accepting the claim; that is not possible."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Accept Claim\"], [\"Payment Order\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Accept Claim\"], [\"Payment Order\"]]\n    }\n  ]\n}"
  },
  {
    "index": 61,
    "prompt": "It is not possible to have the third unblocking mechanism event without any payment order occurring after it.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "It is not possible to have the third unblocking mechanism event without any payment order occurring after it."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"Unblock Claim 3\"], [\"Payment Order\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"Unblock Claim 3\"], [\"Payment Order\"]]\n    }\n  ]\n}"
  },
  {
    "index": 62,
    "prompt": "It is not possible to have instnces without any offers created.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Complete, A_Cancelled, O_Sent (mail and online), A_Accepted, A_Submitted, A_Denied, A_Validating, A_Pending, O_Create Offer, O_Sent (online only), O_Accepted, A_Incomplete"
      },
      {
        "role": "user",
        "content": "It is not possible to have instnces without any offers created."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"O_Create Offer\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"O_Create Offer\"]]\n    }\n  ]\n}"
  },
  {
    "index": 63,
    "prompt": "We cannot have applications that are submitted more than once.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Complete, A_Cancelled, O_Sent (mail and online), A_Accepted, A_Submitted, A_Denied, A_Validating, A_Pending, O_Create Offer, O_Sent (online only), O_Accepted, A_Incomplete"
      },
      {
        "role": "user",
        "content": "We cannot have applications that are submitted more than once."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"A_Submitted\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"A_Submitted\"]]\n    }\n  ]\n}"
  },
  {
    "index": 64,
    "prompt": "Application pending is a possible final outcome for an application and we can only have one outcome for each application.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Complete, A_Cancelled, O_Sent (mail and online), A_Accepted, A_Submitted, A_Denied, A_Validating, A_Pending, O_Create Offer, O_Sent (online only), O_Accepted, A_Incomplete"
      },
      {
        "role": "user",
        "content": "Application pending is a possible final outcome for an application and we can only have one outcome for each application."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Accepted\"], [\"A_Cancelled\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Accepted\"], [\"A_Complete\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Accepted\"], [\"A_Denied\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Accepted\"], [\"A_Incomplete\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Accepted\"], [\"A_Pending\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Cancelled\"], [\"A_Complete\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Cancelled\"], [\"A_Denied\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Cancelled\"], [\"A_Incomplete\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Cancelled\"], [\"A_Pending\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Complete\"], [\"A_Denied\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Complete\"], [\"A_Incomplete\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Complete\"], [\"A_Pending\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Denied\"], [\"A_Incomplete\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Denied\"], [\"A_Pending\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Incomplete\"], [\"A_Pending\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Accepted\"], [\"A_Cancelled\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Accepted\"], [\"A_Complete\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Accepted\"], [\"A_Denied\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Accepted\"], [\"A_Incomplete\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Accepted\"], [\"A_Pending\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Cancelled\"], [\"A_Complete\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Cancelled\"], [\"A_Denied\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Cancelled\"], [\"A_Incomplete\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Cancelled\"], [\"A_Pending\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Complete\"], [\"A_Denied\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Complete\"], [\"A_Incomplete\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Complete\"], [\"A_Pending\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Denied\"], [\"A_Incomplete\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Denied\"], [\"A_Pending\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Incomplete\"], [\"A_Pending\"]]\n    }\n  ]\n}"
  },
  {
    "index": 65,
    "prompt": "Cancellation and pending of an application can never occur together for an individual.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Complete, A_Cancelled, O_Sent (mail and online), A_Accepted, A_Submitted, A_Denied, A_Validating, A_Pending, O_Create Offer, O_Sent (online only), O_Accepted, A_Incomplete"
      },
      {
        "role": "user",
        "content": "Cancellation and pending of an application can never occur together for an individual."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Cancelled\"], [\"A_Pending\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Cancelled\"], [\"A_Pending\"]]\n    }\n  ]\n}"
  },
  {
    "index": 66,
    "prompt": "It should not be possible to have both cancellation and denial of an application.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Complete, A_Cancelled, O_Sent (mail and online), A_Accepted, A_Submitted, A_Denied, A_Validating, A_Pending, O_Create Offer, O_Sent (online only), O_Accepted, A_Incomplete"
      },
      {
        "role": "user",
        "content": "It should not be possible to have both cancellation and denial of an application."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Cancelled\"], [\"A_Denied\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Cancelled\"], [\"A_Denied\"]]\n    }\n  ]\n}"
  },
  {
    "index": 67,
    "prompt": "It is not possible to have an application with both events: offer sent online and offer sent via mail and online.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Complete, A_Cancelled, O_Sent (mail and online), A_Accepted, A_Submitted, A_Denied, A_Validating, A_Pending, O_Create Offer, O_Sent (online only), O_Accepted, A_Incomplete"
      },
      {
        "role": "user",
        "content": "It is not possible to have an application with both events: offer sent online and offer sent via mail and online."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"O_Sent (online only)\"], [\"O_Sent (mail and online)\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"O_Sent (online only)\"], [\"O_Sent (mail and online)\"]]\n    }\n  ]\n}"
  },
  {
    "index": 68,
    "prompt": "Creation of offers after the cancellation of an application is impossible.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Complete, A_Cancelled, O_Sent (mail and online), A_Accepted, A_Submitted, A_Denied, A_Validating, A_Pending, O_Create Offer, O_Sent (online only), O_Accepted, A_Incomplete"
      },
      {
        "role": "user",
        "content": "Creation of offers after the cancellation of an application is impossible."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"A_Cancelled\"], [\"O_Create Offer\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"A_Cancelled\"], [\"O_Create Offer\"]]\n    }\n  ]\n}"
  },
  {
    "index": 69,
    "prompt": "It is not allowed to have the acceptance of an application after it is completed.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Complete, A_Cancelled, O_Sent (mail and online), A_Accepted, A_Submitted, A_Denied, A_Validating, A_Pending, O_Create Offer, O_Sent (online only), O_Accepted, A_Incomplete"
      },
      {
        "role": "user",
        "content": "It is not allowed to have the acceptance of an application after it is completed."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"A_Complete\"], [\"A_Accepted\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"A_Complete\"], [\"A_Accepted\"]]\n    }\n  ]\n}"
  },
  {
    "index": 70,
    "prompt": "It should not be possible to have a pending application without first having an offer accepted.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Complete, A_Cancelled, O_Sent (mail and online), A_Accepted, A_Submitted, A_Denied, A_Validating, A_Pending, O_Create Offer, O_Sent (online only), O_Accepted, A_Incomplete"
      },
      {
        "role": "user",
        "content": "It should not be possible to have a pending application without first having an offer accepted."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"O_Accepted\"], [\"A_Pending\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"O_Accepted\"], [\"A_Pending\"]]\n    }\n  ]\n}"
  },
  {
    "index": 71,
    "prompt": "Validation of an application should occur prior to deciding any incompleteness in the application.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Complete, A_Cancelled, O_Sent (mail and online), A_Accepted, A_Submitted, A_Denied, A_Validating, A_Pending, O_Create Offer, O_Sent (online only), O_Accepted, A_Incomplete"
      },
      {
        "role": "user",
        "content": "Validation of an application should occur prior to deciding any incompleteness in the application."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"A_Validating\"], [\"A_Incomplete\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"A_Validating\"], [\"A_Incomplete\"]]\n    }\n  ]\n}"
  },
  {
    "index": 72,
    "prompt": "All the applications must have a decision.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nbegin editing, revoke decision, mail income, calculate, begin payment, abort payment, mail valid, finish payment, insert document, withdraw, decide"
      },
      {
        "role": "user",
        "content": "All the applications must have a decision."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"decide\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"decide\"]]\n    }\n  ]\n}"
  },
  {
    "index": 73,
    "prompt": "We cannot have multiple withdrawals within the same application.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nbegin editing, revoke decision, mail income, calculate, begin payment, abort payment, mail valid, finish payment, insert document, withdraw, decide"
      },
      {
        "role": "user",
        "content": "We cannot have multiple withdrawals within the same application."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"withdraw\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"withdraw\"]]\n    }\n  ]\n}"
  },
  {
    "index": 74,
    "prompt": "We cannot have mail income without mail valid, and vice versa.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nbegin editing, revoke decision, mail income, calculate, begin payment, abort payment, mail valid, finish payment, insert document, withdraw, decide"
      },
      {
        "role": "user",
        "content": "We cannot have mail income without mail valid, and vice versa."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"mail income\"], [\"mail valid\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"mail income\"], [\"mail valid\"]]\n    }\n  ]\n}"
  },
  {
    "index": 75,
    "prompt": "If a decision is revoked, it cannot be withdrawn, and vice versa.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nbegin editing, revoke decision, mail income, calculate, begin payment, abort payment, mail valid, finish payment, insert document, withdraw, decide"
      },
      {
        "role": "user",
        "content": "If a decision is revoked, it cannot be withdrawn, and vice versa."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"revoke decision\"], [\"withdraw\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"revoke decision\"], [\"withdraw\"]]\n    }\n  ]\n}"
  },
  {
    "index": 76,
    "prompt": "No revoke decision can occur after finishing the payment.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nbegin editing, revoke decision, mail income, calculate, begin payment, abort payment, mail valid, finish payment, insert document, withdraw, decide"
      },
      {
        "role": "user",
        "content": "No revoke decision can occur after finishing the payment."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"finish payment\"], [\"revoke decision\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"finish payment\"], [\"revoke decision\"]]\n    }\n  ]\n}"
  },
  {
    "index": 77,
    "prompt": "After making a decision, no editing should begin.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nbegin editing, revoke decision, mail income, calculate, begin payment, abort payment, mail valid, finish payment, insert document, withdraw, decide"
      },
      {
        "role": "user",
        "content": "After making a decision, no editing should begin."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"decide\"], [\"begin editing\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"decide\"], [\"begin editing\"]]\n    }\n  ]\n}"
  },
  {
    "index": 78,
    "prompt": "All revoke decisions should be preceded by a decision.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nbegin editing, revoke decision, mail income, calculate, begin payment, abort payment, mail valid, finish payment, insert document, withdraw, decide"
      },
      {
        "role": "user",
        "content": "All revoke decisions should be preceded by a decision."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"decide\"], [\"revoke decision\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"decide\"], [\"revoke decision\"]]\n    }\n  ]\n}"
  },
  {
    "index": 79,
    "prompt": "Applications with insertion of documents have begin payment as well.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nbegin editing, revoke decision, mail income, calculate, begin payment, abort payment, mail valid, finish payment, insert document, withdraw, decide"
      },
      {
        "role": "user",
        "content": "Applications with insertion of documents have begin payment as well."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"RespondedExistence\",\n      \"parameters\": [[\"insert document\"], [\"begin payment\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"RespondedExistence\",\n      \"parameters\": [[\"insert document\"], [\"begin payment\"]]\n    }\n  ]\n}"
  },
  {
    "index": 80,
    "prompt": "It is not possible to have mail income without some calculations after it.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nbegin editing, revoke decision, mail income, calculate, begin payment, abort payment, mail valid, finish payment, insert document, withdraw, decide"
      },
      {
        "role": "user",
        "content": "It is not possible to have mail income without some calculations after it."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"mail income\"], [\"calculate\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"mail income\"], [\"calculate\"]]\n    }\n  ]\n}"
  },
  {
    "index": 81,
    "prompt": "Any aborted payment will eventually have finish payment.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nbegin editing, revoke decision, mail income, calculate, begin payment, abort payment, mail valid, finish payment, insert document, withdraw, decide"
      },
      {
        "role": "user",
        "content": "Any aborted payment will eventually have finish payment."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"abort payment\"], [\"finish payment\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"abort payment\"], [\"finish payment\"]]\n    }\n  ]\n}"
  },
  {
    "index": 82,
    "prompt": "Receiving a claim is a mandatory step in the process.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "Receiving a claim is a mandatory step in the process."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"Receive Claim\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"Receive Claim\"]]\n    }\n  ]\n}"
  },
  {
    "index": 83,
    "prompt": "It is impossible to have claims with multiple rejections.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "It is impossible to have claims with multiple rejections."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"Reject Claim\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"Reject Claim\"]]\n    }\n  ]\n}"
  },
  {
    "index": 84,
    "prompt": "Repayment without receiving the first objection is impossible, and vice versa.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "Repayment without receiving the first objection is impossible, and vice versa."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"Repayment\"], [\"Receive objection 1\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"Repayment\"], [\"Receive objection 1\"]]\n    }\n  ]\n}"
  },
  {
    "index": 85,
    "prompt": "If a claim is accepted, it cannot be rejected and vice versa.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "If a claim is accepted, it cannot be rejected and vice versa."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"Accept Claim\"], [\"Reject Claim\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"Accept Claim\"], [\"Reject Claim\"]]\n    }\n  ]\n}"
  },
  {
    "index": 86,
    "prompt": "A claim is either blocked with the first type of blocking or the second type, and not both.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "A claim is either blocked with the first type of blocking or the second type, and not both."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"Block Claim 1\"], [\"Block Claim 2\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"Block Claim 1\"], [\"Block Claim 2\"]]\n    }\n  ]\n}"
  },
  {
    "index": 87,
    "prompt": "Placing a payment order after the repayment should not be allowed.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "Placing a payment order after the repayment should not be allowed."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"Repayment\"], [\"Payment Order\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"Repayment\"], [\"Payment Order\"]]\n    }\n  ]\n}"
  },
  {
    "index": 88,
    "prompt": "We need to first place a payment order before executing any payment.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "We need to first place a payment order before executing any payment."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Payment Order\"], [\"Execute Payment\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Payment Order\"], [\"Execute Payment\"]]\n    }\n  ]\n}"
  },
  {
    "index": 89,
    "prompt": "We cannot have any correct claim without a block claim type 1 before it.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "We cannot have any correct claim without a block claim type 1 before it."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Block Claim 1\"], [\"Correct Claim\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Block Claim 1\"], [\"Correct Claim\"]]\n    }\n  ]\n}"
  },
  {
    "index": 90,
    "prompt": "Withdraw claim must always exist when the third type of blocking exists in the claim.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "Withdraw claim must always exist when the third type of blocking exists in the claim."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"RespondedExistence\",\n      \"parameters\": [[\"Block Claim 3\"], [\"Withdraw Claim\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"RespondedExistence\",\n      \"parameters\": [[\"Block Claim 3\"], [\"Withdraw Claim\"]]\n    }\n  ]\n}"
  },
  {
    "index": 91,
    "prompt": "We cannot have accepted claims without any payment order after it.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "We cannot have accepted claims without any payment order after it."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"Accept Claim\"], [\"Payment Order\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"Accept Claim\"], [\"Payment Order\"]]\n    }\n  ]\n}"
  },
  {
    "index": 92,
    "prompt": "Unblocking claims with the third mechanism must be followed by a payment order.",
    "full_prompt": [
      {
        "role": "system",
        "content": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. Example: AtMost1(in-person appointment) means that the process cannot have more than one in-person appointment, although it may have cases with none.\n- AtLeast1(a): a occurs at least once. Example: AtLeast1(payment) means that payment is a mandatory step in the process, and there may be one or more occurrences of it.\n- Response(a,b): If a occurs, then b occurs after a. Example: Response(A_submission, A_review) means that every submission of an application must be followed by a review, but reviews may still occur even if no submission has taken place.\n- Precedence(a,b): b occurs only if preceded by a. Example: Precedence(A_submission, A_review) means that reviewing an application can only occur if a submission has been recorded beforehand, although submissions may exist without being followed by a review.\n- CoExistence(a,b): a and b occur together. Example: CoExistence(check cred, check hist) means that both credit and history checks must occur for each individual case, but the order in which they happen is not specified. The process may perform the credit check before the history check or the other way around.\n- NotCoExistence(a,b): a and b never occur together. Example: NotCoExistence(check cred, check hist) means that credit and history checks must never occur together for the same individual. If the process includes a credit check, it must exclude a history check, and vice versa.\n- NotSuccession(a,b): b cannot occur after a. Example: NotSuccession(payment, make decision) means that the decision must never occur after the payment. This constraint emphasizes the order of activities, explicitly prohibiting any scenario in which the decision is made following a payment.\n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. RespondedExistence(check cred, check hist) means that whenever credit is checked, a corresponding history check must also occur. However, history may be checked without checking credit. This constraint focuses solely on the existence relationship between activities and does not impose any specific order.\n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\nFor each task, I provide the set of activity labels that exist in the process.\n\nSome examples to learn the constraints:\n\n**Example 1:\nInput: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"request_submitted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"request_submitted\"], [\"check_application\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"accept_application\"], [\"reject_application\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"accept_application\"], [\"submit_invoice\"]]\n    }\n  ]\n}\n\n\n**Example 2:\nInput: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.\n\nOutput:\n{\n  \"constraints\": [\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"assign room\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign room\"]]\n    },\n    {\n      \"template\": \" NotSuccession\",\n      \"parameters\": [[\"doctor visit\"], [\"assign nurse\"]]\n    },\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"doctor visit\"]]\n    }\n  ]\n}\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nBlock Claim 3, Block Claim 1, Block Claim 2, Unblock Claim 3, Accept Claim, Receive objection 1, Payment Order, Receive Claim, Reject Claim, Execute Payment, Correct Claim, Repayment, Withdraw Claim"
      },
      {
        "role": "user",
        "content": "Unblocking claims with the third mechanism must be followed by a payment order."
      },
      {
        "role": "assistant",
        "content": "{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"Unblock Claim 3\"], [\"Payment Order\"]]\n    }\n  ]\n}"
      }
    ],
    "response": "{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"Unblock Claim 3\"], [\"Payment Order\"]]\n    }\n  ]\n}"
  },
  {
    "BPIC18": {
      "recall": 1.0,
      "precision": 1.0
    },
    "UWV": {
      "recall": 0.9696969696969697,
      "precision": 0.7111111111111111
    },
    "BPIC17": {
      "recall": 0.9666666666666667,
      "precision": 0.6170212765957447
    },
    "all": {
      "recall": 0.978494623655914,
      "precision": 0.7459016393442623
    }
  }
]