[
  {
    "log": "UWV",
    "user": "user2",
    "prompt": "All the claims must be received first. Rejection of a claim may occur at most once. It is not possible to have claims with only repayment or only receiving an objection from the first type. We cannot have claims that are both accepted and rejected. A claim may have block claim 1 or 2, but not both of them. After repaying the received benefits, there should be no payment order. All executions of payments must be preceded by a payment order. All claim corrections must be preceded by a block claim 1. Occurrence of withdraw claim is allowed only if block claim 3 also exists. The model allows for ordering a payment without accepting the claim; that is not possible. It is not possible to have the third unblocking mechanism event without any payment order occurring after it.",
    "full_prompt": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. \n- AtLeast1(a): a occurs at least once.\n- Response(a,b): If a occurs, then b occurs after a.\n- Precedence(a,b): b occurs only if preceded by a. \n- CoExistence(a,b): a and b occur together. \n- NotCoExistence(a,b): a and b never occur together. \n- NotSuccession(a,b): b cannot occur after a. \n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. \n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\nThe list of activities used in this process are the following. Please only use these activities to generate constraints:\nReceive objection 1, Accept Claim, Block Claim 1, Block Claim 3, Correct Claim, Execute Payment, Receive Claim, Withdraw Claim, Block Claim 2, Reject Claim, Repayment, Payment Order, Unblock Claim 3\n\nAll the claims must be received first. Rejection of a claim may occur at most once. It is not possible to have claims with only repayment or only receiving an objection from the first type. We cannot have claims that are both accepted and rejected. A claim may have block claim 1 or 2, but not both of them. After repaying the received benefits, there should be no payment order. All executions of payments must be preceded by a payment order. All claim corrections must be preceded by a block claim 1. Occurrence of withdraw claim is allowed only if block claim 3 also exists. The model allows for ordering a payment without accepting the claim; that is not possible. It is not possible to have the third unblocking mechanism event without any payment order occurring after it.",
    "response": "```json\n{\n  \"constraints\": [\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Accept Claim\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Block Claim 1\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Block Claim 3\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Correct Claim\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Execute Payment\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Receive objection 1\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Withdraw Claim\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Block Claim 2\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Reject Claim\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Repayment\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Payment Order\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Receive Claim\"], [\"Unblock Claim 3\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"Reject Claim\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"Accept Claim\"], [\"Reject Claim\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"Block Claim 1\"], [\"Block Claim 2\"]]\n    },\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"Repayment\"], [\"Payment Order\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Payment Order\"], [\"Execute Payment\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Block Claim 1\"], [\"Correct Claim\"]]\n    },\n    {\n      \"template\": \"RespondedExistence\",\n      \"parameters\": [[\"Withdraw Claim\"], [\"Block Claim 3\"]]\n    },\n    {\n      \"template\": \"RespondedExistence\",\n      \"parameters\": [[\"Payment Order\"], [\"Accept Claim\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"Unblock Claim 3\"], [\"Payment Order\"]]\n    }\n  ]\n}\n```",
    "match": [
      "among 21 extracted rules, 8 out of 11 exactly match!"
    ]
  },
  {
    "log": "UWV",
    "user": "user1",
    "prompt": "We cannot have any application without a receive claim event. We cannot have multiple rejections for a single claim. First type of receive objection and repayment always occur together in a claim. One claim can be either accepted or rejected. First and second blocking mechanisms cannot occur together. No payment can be orderd after a repayment. We cannot execute a payment without first placing an order for the payment. Correction of claims is only possible if the claim is already blocked with the first blocking mechanism. If a claim is withdrawn, it should be blocked with mechanism 3 as well. All the accepted claims should have a payment order afterward. If a claim is unblocked with type three, then a payment order must occur afterward.",
    "full_prompt": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. \n- AtLeast1(a): a occurs at least once.\n- Response(a,b): If a occurs, then b occurs after a.\n- Precedence(a,b): b occurs only if preceded by a. \n- CoExistence(a,b): a and b occur together. \n- NotCoExistence(a,b): a and b never occur together. \n- NotSuccession(a,b): b cannot occur after a. \n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. \n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\nThe list of activities used in this process are the following. Please only use these activities to generate constraints:\nReceive objection 1, Accept Claim, Block Claim 1, Block Claim 3, Correct Claim, Execute Payment, Receive Claim, Withdraw Claim, Block Claim 2, Reject Claim, Repayment, Payment Order, Unblock Claim 3\n\nWe cannot have any application without a receive claim event. We cannot have multiple rejections for a single claim. First type of receive objection and repayment always occur together in a claim. One claim can be either accepted or rejected. First and second blocking mechanisms cannot occur together. No payment can be orderd after a repayment. We cannot execute a payment without first placing an order for the payment. Correction of claims is only possible if the claim is already blocked with the first blocking mechanism. If a claim is withdrawn, it should be blocked with mechanism 3 as well. All the accepted claims should have a payment order afterward. If a claim is unblocked with type three, then a payment order must occur afterward.",
    "response": "```json\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"Receive Claim\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"Reject Claim\"]]\n    },\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"Receive objection 1\"], [\"Repayment\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"Accept Claim\"], [\"Reject Claim\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"Block Claim 1\"], [\"Block Claim 2\"]]\n    },\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"Repayment\"], [\"Payment Order\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Payment Order\"], [\"Execute Payment\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"Block Claim 1\"], [\"Correct Claim\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"Withdraw Claim\"], [\"Block Claim 3\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"Accept Claim\"], [\"Payment Order\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"Unblock Claim 3\"], [\"Payment Order\"]]\n    }\n  ]\n}\n```",
    "match": [
      "among 11 extracted rules, 10 out of 11 exactly match!"
    ]
  },
  {
    "log": "UWV",
    "user": "user3",
    "prompt": "Receiving a claim is a mandatory step in the process. It is impossible to have claims with multiple rejections. Repayment without receiving the first objection is impossible, and vice versa. If a claim is accepted, it cannot be rejected and vice versa. A claim is either blocked with the first type of blocking or the second type, and not both. Placing a payment order after the repayment should not be allowed. We need to first place a payment order before executing any payment. We cannot have any correct claim without a block claim type 1 before it. Withdraw claim must always exist when the third type of blocking exists in the claim. We cannot have accepted claims without any payment order after it. Unblocking claims with the third mechanism must be followed by a payment order.",
    "full_prompt": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. \n- AtLeast1(a): a occurs at least once.\n- Response(a,b): If a occurs, then b occurs after a.\n- Precedence(a,b): b occurs only if preceded by a. \n- CoExistence(a,b): a and b occur together. \n- NotCoExistence(a,b): a and b never occur together. \n- NotSuccession(a,b): b cannot occur after a. \n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. \n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\nThe list of activities used in this process are the following. Please only use these activities to generate constraints:\nReceive objection 1, Accept Claim, Block Claim 1, Block Claim 3, Correct Claim, Execute Payment, Receive Claim, Withdraw Claim, Block Claim 2, Reject Claim, Repayment, Payment Order, Unblock Claim 3\n\nReceiving a claim is a mandatory step in the process. It is impossible to have claims with multiple rejections. Repayment without receiving the first objection is impossible, and vice versa. If a claim is accepted, it cannot be rejected and vice versa. A claim is either blocked with the first type of blocking or the second type, and not both. Placing a payment order after the repayment should not be allowed. We need to first place a payment order before executing any payment. We cannot have any correct claim without a block claim type 1 before it. Withdraw claim must always exist when the third type of blocking exists in the claim. We cannot have accepted claims without any payment order after it. Unblocking claims with the third mechanism must be followed by a payment order.",
    "response": "```json\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [\n        [\"Receive Claim\"]\n      ]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [\n        [\"Reject Claim\"]\n      ]\n    },\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [\n        [\"Repayment\"],\n        [\"Receive objection 1\"]\n      ]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [\n        [\"Accept Claim\"],\n        [\"Reject Claim\"]\n      ]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [\n        [\"Block Claim 1\"],\n        [\"Block Claim 2\"]\n      ]\n    },\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [\n        [\"Repayment\"],\n        [\"Payment Order\"]\n      ]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [\n        [\"Payment Order\"],\n        [\"Execute Payment\"]\n      ]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [\n        [\"Block Claim 1\"],\n        [\"Correct Claim\"]\n      ]\n    },\n    {\n      \"template\": \"RespondedExistence\",\n      \"parameters\": [\n        [\"Block Claim 3\"],\n        [\"Withdraw Claim\"]\n      ]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [\n        [\"Accept Claim\"],\n        [\"Payment Order\"]\n      ]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [\n        [\"Unblock Claim 3\"],\n        [\"Payment Order\"]\n      ]\n    }\n  ]\n}\n```",
    "match": [
      "among 11 extracted rules, 11 out of 11 exactly match!"
    ]
  },
  {
    "log": "BPIC17",
    "user": "user2",
    "prompt": "Creating an offer is a mandatory step in the loan application process. Submitting an application cannot occur multiple times. We may have a maximum of one application pending event. One application can have only one of the outcomes: pending or cancelled. An application can either be cancelled or denied. There are two mutually exclusive procedures for sending offers such that including one excludes the other: 1) via mail and online, and 2) online only.  When an application is cancelled, no more offer should be created for this application. Acceptance of an application never occurs after the completion of the application. All pending applications must be preceded by an accepted offer. Any application incomplete event must be proceeded by the validation of the application.",
    "full_prompt": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. \n- AtLeast1(a): a occurs at least once.\n- Response(a,b): If a occurs, then b occurs after a.\n- Precedence(a,b): b occurs only if preceded by a. \n- CoExistence(a,b): a and b occur together. \n- NotCoExistence(a,b): a and b never occur together. \n- NotSuccession(a,b): b cannot occur after a. \n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. \n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\nThe list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Denied, O_Sent (online only), O_Sent (mail and online), O_Create Offer, A_Accepted, O_Accepted, A_Incomplete, A_Complete, A_Validating, A_Pending, A_Cancelled, A_Submitted\n\nCreating an offer is a mandatory step in the loan application process. Submitting an application cannot occur multiple times. We may have a maximum of one application pending event. One application can have only one of the outcomes: pending or cancelled. An application can either be cancelled or denied. There are two mutually exclusive procedures for sending offers such that including one excludes the other: 1) via mail and online, and 2) online only.  When an application is cancelled, no more offer should be created for this application. Acceptance of an application never occurs after the completion of the application. All pending applications must be preceded by an accepted offer. Any application incomplete event must be proceeded by the validation of the application.",
    "response": "```json\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"O_Create Offer\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"A_Submitted\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"A_Pending\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Pending\"], [\"A_Cancelled\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Cancelled\"], [\"A_Denied\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"O_Sent (mail and online)\"], [\"O_Sent (online only)\"]]\n    },\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"A_Cancelled\"], [\"O_Create Offer\"]]\n    },\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"A_Complete\"], [\"A_Accepted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"O_Accepted\"], [\"A_Pending\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"A_Validating\"], [\"A_Incomplete\"]]\n    }\n  ]\n}\n```",
    "match": [
      "among 10 extracted rules, 10 out of 10 exactly match!"
    ]
  },
  {
    "log": "BPIC17",
    "user": "user1",
    "prompt": "In all applications, the bank is required to create at least one offer. An application cannot be submitted more than once. Pending status of an application means that the application is approved and it cannot occur multiple times. Pending and cancelled status cannot occur at the same time. Cancellation and denial of an application are final outcomes, and only one of them can occur for an individual. An offer can be sent either online only or both online and via mail. It is not allowed to create an offer after an application is cancelled. We cannot accept an application after it has been completed. If an application is in pending, there must be an accepted offer beforehand. We cannot have an incomplete status for an application without validating it first.",
    "full_prompt": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. \n- AtLeast1(a): a occurs at least once.\n- Response(a,b): If a occurs, then b occurs after a.\n- Precedence(a,b): b occurs only if preceded by a. \n- CoExistence(a,b): a and b occur together. \n- NotCoExistence(a,b): a and b never occur together. \n- NotSuccession(a,b): b cannot occur after a. \n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. \n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\nThe list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Denied, O_Sent (online only), O_Sent (mail and online), O_Create Offer, A_Accepted, O_Accepted, A_Incomplete, A_Complete, A_Validating, A_Pending, A_Cancelled, A_Submitted\n\nIn all applications, the bank is required to create at least one offer. An application cannot be submitted more than once. Pending status of an application means that the application is approved and it cannot occur multiple times. Pending and cancelled status cannot occur at the same time. Cancellation and denial of an application are final outcomes, and only one of them can occur for an individual. An offer can be sent either online only or both online and via mail. It is not allowed to create an offer after an application is cancelled. We cannot accept an application after it has been completed. If an application is in pending, there must be an accepted offer beforehand. We cannot have an incomplete status for an application without validating it first.",
    "response": "```json\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"O_Create Offer\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"A_Submitted\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"A_Pending\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Pending\"], [\"A_Cancelled\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Cancelled\"], [\"A_Denied\"]]\n    },\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"A_Cancelled\"], [\"O_Create Offer\"]]\n    },\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"A_Complete\"], [\"O_Accepted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"O_Accepted\"], [\"A_Pending\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"A_Validating\"], [\"A_Incomplete\"]]\n    }\n  ]\n}\n```",
    "match": [
      "among 9 extracted rules, 8 out of 10 exactly match!"
    ]
  },
  {
    "log": "BPIC17",
    "user": "user3",
    "prompt": "It is not possible to have instnces without any offers created. We cannot have applications that are submitted more than once. Application pending is a possible final outcome for an application and we can only have one outcome for each application. Cancellation and pending of an application can never occur together for an individual. It should not be possible to have both cancellation and denial of an application. It is not possible to have an application with both events: offer sent online and offer sent via mail and online. Creation of offers after the cancellation of an application is impossible. It is not allowed to have the acceptance of an application after it is completed. It should not be possible to have a pending application without first having an offer accepted. Validation of an application should occur prior to deciding any incompleteness in the application.",
    "full_prompt": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. \n- AtLeast1(a): a occurs at least once.\n- Response(a,b): If a occurs, then b occurs after a.\n- Precedence(a,b): b occurs only if preceded by a. \n- CoExistence(a,b): a and b occur together. \n- NotCoExistence(a,b): a and b never occur together. \n- NotSuccession(a,b): b cannot occur after a. \n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. \n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\nThe list of activities used in this process are the following. Please only use these activities to generate constraints:\nA_Denied, O_Sent (online only), O_Sent (mail and online), O_Create Offer, A_Accepted, O_Accepted, A_Incomplete, A_Complete, A_Validating, A_Pending, A_Cancelled, A_Submitted\n\nIt is not possible to have instnces without any offers created. We cannot have applications that are submitted more than once. Application pending is a possible final outcome for an application and we can only have one outcome for each application. Cancellation and pending of an application can never occur together for an individual. It should not be possible to have both cancellation and denial of an application. It is not possible to have an application with both events: offer sent online and offer sent via mail and online. Creation of offers after the cancellation of an application is impossible. It is not allowed to have the acceptance of an application after it is completed. It should not be possible to have a pending application without first having an offer accepted. Validation of an application should occur prior to deciding any incompleteness in the application.",
    "response": "```json\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"O_Create Offer\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"A_Submitted\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Cancelled\"], [\"A_Pending\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Cancelled\"], [\"A_Denied\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"O_Sent (online only)\"], [\"O_Sent (mail and online)\"]]\n    },\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"A_Cancelled\"], [\"O_Create Offer\"]]\n    },\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"A_Complete\"], [\"A_Accepted\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"O_Accepted\"], [\"A_Pending\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"A_Validating\"], [\"A_Incomplete\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Denied\"], [\"A_Accepted\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Denied\"], [\"A_Pending\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Accepted\"], [\"A_Pending\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"A_Accepted\"], [\"A_Cancelled\"]]\n    }\n  ]\n}\n```",
    "match": [
      "among 13 extracted rules, 9 out of 10 exactly match!"
    ]
  },
  {
    "log": "BPIC18",
    "user": "user2",
    "prompt": "We cannot have cases without a decision. Each application can be withdrawn a maximum of one time. The activities mail valid and mail income occur together in all cases. We cannot have both revoking a decision and withdrawal of the application in one case. Revoking a decision after finalizing the payment is not allowed. Begin edition should not be permitted after making a decision. In order to have revoking of a decision, it is necessary to have a decision made in the process. Inserting documents in an application implies that payment has begun before or will begin after it. If mail income is recorded, we should have calculations at some point after it. Aborting a payment should be followed by finish editing.",
    "full_prompt": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. \n- AtLeast1(a): a occurs at least once.\n- Response(a,b): If a occurs, then b occurs after a.\n- Precedence(a,b): b occurs only if preceded by a. \n- CoExistence(a,b): a and b occur together. \n- NotCoExistence(a,b): a and b never occur together. \n- NotSuccession(a,b): b cannot occur after a. \n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. \n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\nThe list of activities used in this process are the following. Please only use these activities to generate constraints:\ninsert document, withdraw, finish payment, begin editing, abort payment, mail valid, calculate, mail income, decide, begin payment, revoke decision\n\nWe cannot have cases without a decision. Each application can be withdrawn a maximum of one time. The activities mail valid and mail income occur together in all cases. We cannot have both revoking a decision and withdrawal of the application in one case. Revoking a decision after finalizing the payment is not allowed. Begin edition should not be permitted after making a decision. In order to have revoking of a decision, it is necessary to have a decision made in the process. Inserting documents in an application implies that payment has begun before or will begin after it. If mail income is recorded, we should have calculations at some point after it. Aborting a payment should be followed by finish editing.",
    "response": "```json\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"decide\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"withdraw\"]]\n    },\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"mail valid\"], [\"mail income\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"revoke decision\"], [\"withdraw\"]]\n    },\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"finish payment\"], [\"revoke decision\"]]\n    },\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"decide\"], [\"begin editing\"]]\n    },\n    {\n      \"template\": \"RespondedExistence\",\n      \"parameters\": [[\"revoke decision\"], [\"decide\"]]\n    },\n    {\n      \"template\": \"RespondedExistence\",\n      \"parameters\": [[\"insert document\"], [\"begin payment\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"mail income\"], [\"calculate\"]]\n    }\n  ]\n}\n```",
    "match": [
      "among 9 extracted rules, 8 out of 10 exactly match!"
    ]
  },
  {
    "log": "BPIC18",
    "user": "user1",
    "prompt": "Making a decision is a mandatory action in this process. Withdrawing the case cannot occur more than once. Mail income and mail valid both must coexist in all individual applications. Only one of the activities withdrawal and revoke decision can occur in a case. The farmers cannot revoke the decision after the payment is finished. We cannot begin editing when a decision is made. It is not possible to revoke a decision without making a decision first. If documents are inserted, payment should also begin in each case. Any mail income should be followed by some calculations. If a payment is aborted, it should be finished at some point after it.",
    "full_prompt": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. \n- AtLeast1(a): a occurs at least once.\n- Response(a,b): If a occurs, then b occurs after a.\n- Precedence(a,b): b occurs only if preceded by a. \n- CoExistence(a,b): a and b occur together. \n- NotCoExistence(a,b): a and b never occur together. \n- NotSuccession(a,b): b cannot occur after a. \n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. \n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\nThe list of activities used in this process are the following. Please only use these activities to generate constraints:\ninsert document, withdraw, finish payment, begin editing, abort payment, mail valid, calculate, mail income, decide, begin payment, revoke decision\n\nMaking a decision is a mandatory action in this process. Withdrawing the case cannot occur more than once. Mail income and mail valid both must coexist in all individual applications. Only one of the activities withdrawal and revoke decision can occur in a case. The farmers cannot revoke the decision after the payment is finished. We cannot begin editing when a decision is made. It is not possible to revoke a decision without making a decision first. If documents are inserted, payment should also begin in each case. Any mail income should be followed by some calculations. If a payment is aborted, it should be finished at some point after it.",
    "response": "```json\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"decide\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"withdraw\"]]\n    },\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"mail income\"], [\"mail valid\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"withdraw\"], [\"revoke decision\"]]\n    },\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"finish payment\"], [\"revoke decision\"]]\n    },\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"decide\"], [\"begin editing\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"decide\"], [\"revoke decision\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"insert document\"], [\"begin payment\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"mail income\"], [\"calculate\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"abort payment\"], [\"finish payment\"]]\n    }\n  ]\n}\n```",
    "match": [
      "among 10 extracted rules, 9 out of 10 exactly match!"
    ]
  },
  {
    "log": "BPIC18",
    "user": "user3",
    "prompt": "All the applications must have a decision. We cannot have multiple withdrawals within the same application. We cannot have mail income without mail valid, and vice versa. If a decision is revoked, it cannot be withdrawn, and vice versa. No revoke decision can occur after finishing the payment. After making a decision, no editing should begin. All revoke decisions should be preceded by a decision. Applications with insertion of documents have begin payment as well. It is not possible to have mail income without some calculations after it. Any aborted payment will eventually have finish payment.",
    "full_prompt": "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. \n- AtLeast1(a): a occurs at least once.\n- Response(a,b): If a occurs, then b occurs after a.\n- Precedence(a,b): b occurs only if preceded by a. \n- CoExistence(a,b): a and b occur together. \n- NotCoExistence(a,b): a and b never occur together. \n- NotSuccession(a,b): b cannot occur after a. \n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. \n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\nThe list of activities used in this process are the following. Please only use these activities to generate constraints:\ninsert document, withdraw, finish payment, begin editing, abort payment, mail valid, calculate, mail income, decide, begin payment, revoke decision\n\nAll the applications must have a decision. We cannot have multiple withdrawals within the same application. We cannot have mail income without mail valid, and vice versa. If a decision is revoked, it cannot be withdrawn, and vice versa. No revoke decision can occur after finishing the payment. After making a decision, no editing should begin. All revoke decisions should be preceded by a decision. Applications with insertion of documents have begin payment as well. It is not possible to have mail income without some calculations after it. Any aborted payment will eventually have finish payment.",
    "response": "```json\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"decide\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"withdraw\"]]\n    },\n    {\n      \"template\": \"CoExistence\",\n      \"parameters\": [[\"mail income\"], [\"mail valid\"]]\n    },\n    {\n      \"template\": \"NotCoExistence\",\n      \"parameters\": [[\"revoke decision\"], [\"withdraw\"]]\n    },\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"finish payment\"], [\"revoke decision\"]]\n    },\n    {\n      \"template\": \"NotSuccession\",\n      \"parameters\": [[\"decide\"], [\"begin editing\"]]\n    },\n    {\n      \"template\": \"Precedence\",\n      \"parameters\": [[\"decide\"], [\"revoke decision\"]]\n    },\n    {\n      \"template\": \"RespondedExistence\",\n      \"parameters\": [[\"insert document\"], [\"begin payment\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"mail income\"], [\"calculate\"]]\n    },\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"abort payment\"], [\"finish payment\"]]\n    }\n  ]\n}\n```",
    "match": [
      "among 10 extracted rules, 10 out of 10 exactly match!"
    ]
  },
  {
    "UWV": {
      "recall": 0.8787878787878788,
      "precision": 0.6744186046511628
    },
    "BPIC17": {
      "recall": 0.9,
      "precision": 0.84375
    },
    "BPIC18": {
      "recall": 0.9,
      "precision": 0.9310344827586207
    },
    "all": {
      "recall": 0.8924731182795699,
      "precision": 0.7980769230769231
    }
  }
]