[
  {
    "index": 0,
    "prompt": "In all applications, the bank is required to create at least one offer.",
    "full_prompt": [
      {
        "role": "user",
        "parts": [
          "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. \n- AtLeast1(a): a occurs at least once.\n- Response(a,b): If a occurs, then b occurs after a.\n- Precedence(a,b): b occurs only if preceded by a. \n- CoExistence(a,b): a and b occur together. \n- NotCoExistence(a,b): a and b never occur together. \n- NotSuccession(a,b): b cannot occur after a. \n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. \n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nO_Create Offer\n\nIn all applications, the bank is required to create at least one offer."
        ]
      },
      {
        "role": "model",
        "parts": [
          "```json\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"O_Create Offer\"]]\n    }\n  ]\n}\n```"
        ]
      }
    ],
    "response": "```json\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"O_Create Offer\"]]\n    }\n  ]\n}\n```"
  },
  {
    "index": 1,
    "prompt": "Making a decision is a mandatory action in this process.",
    "full_prompt": [
      {
        "role": "user",
        "parts": [
          "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. \n- AtLeast1(a): a occurs at least once.\n- Response(a,b): If a occurs, then b occurs after a.\n- Precedence(a,b): b occurs only if preceded by a. \n- CoExistence(a,b): a and b occur together. \n- NotCoExistence(a,b): a and b never occur together. \n- NotSuccession(a,b): b cannot occur after a. \n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. \n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\ndecide\n\nMaking a decision is a mandatory action in this process."
        ]
      },
      {
        "role": "model",
        "parts": [
          "```json\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"decide\"]]\n    }\n  ]\n}\n```"
        ]
      }
    ],
    "response": "```json\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"decide\"]]\n    }\n  ]\n}\n```"
  },
  {
    "index": 2,
    "prompt": "We cannot have any application without a receive claim event.",
    "full_prompt": [
      {
        "role": "user",
        "parts": [
          "Task Overview:\nYou are an assistant that helps translate free-text process descriptions into declarative process constraints.\n\nYour goal is to:\n1) Identify declarative constraints from the text.\n2) Return them in strict JSON format (see below).\n\nJSON Output Format:\nYou must always return a single valid JSON object in this format:\n** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**\n{\n  \"constraints\": [\n    {\n      \"template\": \"Response\",\n      \"parameters\": [[\"a\"], [\"b\"]]\n    },\n    {\n      \"template\": \"AtMost1\",\n      \"parameters\": [[\"c\"]]\n    }\n  ]\n}\n\n\nSupported Templates:\nConsider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named \"example-template\" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:\n- AtMost1(a): a occurs at most once. \n- AtLeast1(a): a occurs at least once.\n- Response(a,b): If a occurs, then b occurs after a.\n- Precedence(a,b): b occurs only if preceded by a. \n- CoExistence(a,b): a and b occur together. \n- NotCoExistence(a,b): a and b never occur together. \n- NotSuccession(a,b): b cannot occur after a. \n- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. \n** Only use these templates. Do not invent new ones or use logical operators like “or”. **\n\n\nSome more instructions:\nIt is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity\nIf several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.\n\n\nThe following is the list of activities used in the current process. Only use these when generating constraints:\n\n\n The list of activities used in this process are the following. Please only use these activities to generate constraints:\nReceive Claim\n\nWe cannot have any application without a receive claim event."
        ]
      },
      {
        "role": "model",
        "parts": [
          "```json\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"Receive Claim\"]]\n    }\n  ]\n}\n```"
        ]
      }
    ],
    "response": "```json\n{\n  \"constraints\": [\n    {\n      \"template\": \"AtLeast1\",\n      \"parameters\": [[\"Receive Claim\"]]\n    }\n  ]\n}\n```"
  },
  {
    "BPIC18": {
      "recall": 1.0,
      "precision": 1.0
    },
    "BPIC17": {
      "recall": 1.0,
      "precision": 1.0
    },
    "UWV": {
      "recall": 1.0,
      "precision": 1.0
    },
    "all": {
      "recall": 1.0,
      "precision": 1.0
    }
  }
]