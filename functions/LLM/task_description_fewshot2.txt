Task Overview:
You are an assistant that helps translate free-text process descriptions into declarative process constraints.

Your goal is to:
1) Identify declarative constraints from the text.
2) Return them in strict JSON format (see below).

JSON Output Format:
You must always return a single valid JSON object in this format:
** Do not return any explanation or markdown. Only return a single valid JSON object exactly like this.**
{
  "constraints": [
    {
      "template": "Response",
      "parameters": [["a"], ["b"]]
    },
    {
      "template": "AtMost1",
      "parameters": [["c"]]
    }
  ]
}


Supported Templates:
Consider only the following declarative constraint definitions where a, b, c, and d are activities and template example-template(x,y) specifies a template named "example-template" and x and y can be one of the activities from the set of all activities. The supported declarative constraint templates in our framework are:
- AtMost1(a): a occurs at most once. 
- AtLeast1(a): a occurs at least once, which means the existance of activity a is mandatory. 
- Response(a,b): If a occurs, then b occurs after a.
- Precedence(a,b): b occurs only if preceded by a. 
- CoExistence(a,b): a and b occur together. 
- NotCoExistence(a,b): a and b never occur together. 
- NotSuccession(a,b): b cannot occur after a. 
- RespondedExistence(a,b): If a occurs in the trace, then b occurs as well. 
** Only use these templates. Do not invent new ones or use logical operators like “or”. **



Some more instructions:
It is not possible to generate constraints like Response(a, (b or c)). The first and second elements must be a single activity
If several valid constraints refer to the same activities, keep only the most restrictive one. For example, when both RespondedExistence(a,b) and CoExistence(a,b) hold, report only CoExistence(a, b), because it subsumes (and is therefore stricter than) RespondedExistence.
For each task, I provide the set of activity labels that exist in the process.

Some examples to learn the constraints:

**Example 1:
Input: List of activities: {request_submitted, check_application, accept_application, reject_application, submit_invoice}. All applications must contain at most one request submitted. The supervisor can only check the application if it has been submitted. Each application must be either accepted or rejected, but not both The employee must submit the invoice upon approval of the request.

Output:
{
  "constraints": [
    {
      "template": "AtMost1",
      "parameters": [["request_submitted"]]
    },
    {
      "template": "Precedence",
      "parameters": [["request_submitted "], ["check_application"]]
    },
    {
      "template": "NotCoExistence",
      "parameters": [["accept_application"], ["reject_application"]]
    },
    {
      "template": "Response",
      "parameters": [["accept_application"], ["submit_invoice"]]
    }
  ]
}


**Example 2:
Input: List of activities: {register, assign room, assign nurse, doctor visit}. When patients register at the counter, the operator must assign both a room and a nurse to the patient. The doctor is not allowed to visit the patient before both the room and the nurse have been assigned. According to the guidelines, at least one doctor visit must be conducted.

Output:
{
  "constraints": [
    {
      "template": "CoExistence",
      "parameters": [["assign room"], ["assign nurse"]]
    },
    {
      "template": " NotSuccession",
      "parameters": [ ["doctor visit"], ["assign room"]]
    },
    {
      "template": " NotSuccession",
      "parameters": [["doctor visit"], ["assign nurse"]]
    },
    {
      "template": "AtLeast1",
      "parameters": [["doctor visit"]]
    }
  ]
}


The list of activities is the actual process you need to assist with is:



