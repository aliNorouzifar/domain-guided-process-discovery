<?xml version="1.0" encoding="UTF-8" standalone="no"?><model><assignment language="ConDec" name="Process model discovered from uwv.xes"><activitydefinitions><activity id="65" name="Accept Claim"/><activity id="66" name="Block Claim 1"/><activity id="67" name="Block Claim 2"/><activity id="68" name="Block Claim 3"/><activity id="69" name="Correct Claim"/><activity id="70" name="Execute Payment"/><activity id="71" name="Payment Order"/><activity id="72" name="Receive Claim"/><activity id="73" name="Receive Objection 1"/><activity id="74" name="Receive Objection 2"/><activity id="75" name="Reject Claim"/><activity id="76" name="Repayment"/><activity id="77" name="Start Claim"/><activity id="78" name="Unblock Claim 1"/><activity id="79" name="Unblock Claim 3"/><activity id="80" name="Withdraw Claim"/></activitydefinitions><constraintdefinitions><constraint id="1" mandatory="true"><condition/><name>absence2</name><template><description>A can happen at most once.</description><display>0..1</display><name>absence2</name><text>! ( &lt;&gt; ( ( "A" /\ X(&lt;&gt;("A")) ) ) );support;0.999500;confidence;0.958021;IF;0.918263</text><parameters><parameter branchable="false" id="1" name="A"><graphical><style number="1"/><begin fill="false" style="0"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">SATISFIED undefined</message><message state="VIOLATED_TEMPORARY">VIOLATED_TEMPORARY undefined</message><message state="VIOLATED">VIOLATED undefined</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Accept Claim"/></branches></parameter></constraintparameters></constraint><constraint id="2" mandatory="true"><condition/><name>succession</name><template><description>response and precedence:
1. After every &lt;b&gt;Accept Claim&lt;/b&gt; there has to be at least one &lt;b&gt;Execute Payment&lt;/b&gt;.
and
2. &lt;b&gt;Execute Payment&lt;/b&gt; has to be preceded by &lt;b&gt;Accept Claim&lt;/b&gt;. &lt;b&gt;Execute Payment&lt;/b&gt; can happen only after &lt;b&gt;Accept Claim&lt;/b&gt; had happened.</description><display>succession</display><name>succession</name><text>( []( ( "A" -&gt; &lt;&gt;( "B" ) ) ) /\      ((     ( !("B" ) U "A" )) \/ ([](!("B"))))       );support;1.000000;confidence;0.958500;IF;0.918722</text><parameters><parameter branchable="true" id="1" name="A"><graphical><style number="1"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter><parameter branchable="true" id="2" name="B"><graphical><style number="1"/><begin fill="true" style="10"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">&lt;html&gt;SATISFIED undefined&lt;/html&gt;</message><message state="VIOLATED_TEMPORARY">&lt;html&gt;VIOLATED_TEMPORARY undefined&lt;/html&gt;</message><message state="VIOLATED">&lt;html&gt;VIOLATED undefined&lt;/html&gt;</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Accept Claim"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Execute Payment"/></branches></parameter></constraintparameters></constraint><constraint id="3" mandatory="true"><condition/><name>not chain succession</name><template><description>A and be can never be executed next to each other where A if executed first and B second.</description><display>not chain succession</display><name>not chain succession</name><text>[]( ( "A" -&gt; X( !( "B" ) ) ) );support;1.000000;confidence;0.958500;IF;0.918722</text><parameters><parameter branchable="false" id="1" name="A"><graphical><style number="3"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="8"/></graphical></parameter><parameter branchable="false" id="2" name="B"><graphical><style number="3"/><begin fill="true" style="10"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">SATISFIED undefined</message><message state="VIOLATED_TEMPORARY">VIOLATED_TEMPORARY undefined</message><message state="VIOLATED">VIOLATED undefined</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Accept Claim"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Execute Payment"/></branches></parameter></constraintparameters></constraint><constraint id="4" mandatory="true"><condition/><name>succession</name><template><description>response and precedence:
1. After every &lt;b&gt;Accept Claim&lt;/b&gt; there has to be at least one &lt;b&gt;Payment Order&lt;/b&gt;.
and
2. &lt;b&gt;Payment Order&lt;/b&gt; has to be preceded by &lt;b&gt;Accept Claim&lt;/b&gt;. &lt;b&gt;Payment Order&lt;/b&gt; can happen only after &lt;b&gt;Accept Claim&lt;/b&gt; had happened.</description><display>succession</display><name>succession</name><text>( []( ( "A" -&gt; &lt;&gt;( "B" ) ) ) /\      ((     ( !("B" ) U "A" )) \/ ([](!("B"))))       );support;1.000000;confidence;0.958500;IF;0.918722</text><parameters><parameter branchable="true" id="1" name="A"><graphical><style number="1"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter><parameter branchable="true" id="2" name="B"><graphical><style number="1"/><begin fill="true" style="10"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">&lt;html&gt;SATISFIED undefined&lt;/html&gt;</message><message state="VIOLATED_TEMPORARY">&lt;html&gt;VIOLATED_TEMPORARY undefined&lt;/html&gt;</message><message state="VIOLATED">&lt;html&gt;VIOLATED undefined&lt;/html&gt;</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Accept Claim"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Payment Order"/></branches></parameter></constraintparameters></constraint><constraint id="5" mandatory="true"><condition/><name>not succession</name><template><description>After A there cannot be eventually a B and Before B there cannot be an A</description><display>not succession</display><name>not succession</name><text>[]( ( "A" -&gt; !( &lt;&gt;( "B" ) ) ) );support;1.000000;confidence;0.958500;IF;0.958500</text><parameters><parameter branchable="false" id="1" name="A"><graphical><style number="1"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="8"/></graphical></parameter><parameter branchable="false" id="2" name="B"><graphical><style number="1"/><begin fill="true" style="10"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">SATISFIED undefined</message><message state="VIOLATED_TEMPORARY">VIOLATED_TEMPORARY undefined</message><message state="VIOLATED">VIOLATED undefined</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Accept Claim"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Receive Claim"/></branches></parameter></constraintparameters></constraint><constraint id="6" mandatory="true"><condition/><name>not succession</name><template><description>After A there cannot be eventually a B and Before B there cannot be an A</description><display>not succession</display><name>not succession</name><text>[]( ( "A" -&gt; !( &lt;&gt;( "B" ) ) ) );support;1.000000;confidence;0.958500;IF;0.958500</text><parameters><parameter branchable="false" id="1" name="A"><graphical><style number="1"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="8"/></graphical></parameter><parameter branchable="false" id="2" name="B"><graphical><style number="1"/><begin fill="true" style="10"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">SATISFIED undefined</message><message state="VIOLATED_TEMPORARY">VIOLATED_TEMPORARY undefined</message><message state="VIOLATED">VIOLATED undefined</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Accept Claim"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Start Claim"/></branches></parameter></constraintparameters></constraint><constraint id="7" mandatory="true"><condition/><name>precedence</name><template><description>&lt;b&gt;Accept Claim&lt;/b&gt; has to be preceded by &lt;b&gt;Receive Claim&lt;/b&gt;. &lt;b&gt;Accept Claim&lt;/b&gt; can happen only after &lt;b&gt;Receive Claim&lt;/b&gt; had happened.</description><display>precedence</display><name>precedence</name><text> ( ! ("B" ) U "A" ) \/ ([](!("B"))) /\  ! ("B" );support;1.000000;confidence;1.000000;IF;0.958500</text><parameters><parameter branchable="true" id="1" name="A"><graphical><style number="1"/><begin fill="true" style="0"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter><parameter branchable="true" id="2" name="B"><graphical><style number="1"/><begin fill="true" style="10"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">&lt;html&gt;This constraint is satisfied because either: 
&lt;ul&gt;
&lt;li&gt;task &amp;quot;B&amp;quot; was never executed, or&lt;/li&gt;
&lt;li&gt;first task &amp;quot;A&amp;quot; was executed, and then task &amp;quot;B&amp;quot; was executed. &lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</message><message state="VIOLATED_TEMPORARY">&lt;html&gt;This should never happen!&lt;/html&gt;</message><message state="VIOLATED">&lt;html&gt;This constraint is violated because task &amp;quot;B&amp;quot; was executed before task &amp;quot;A&amp;quot;.&lt;/html&gt;</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Receive Claim"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Accept Claim"/></branches></parameter></constraintparameters></constraint><constraint id="8" mandatory="true"><condition/><name>precedence</name><template><description>&lt;b&gt;Accept Claim&lt;/b&gt; has to be preceded by &lt;b&gt;Start Claim&lt;/b&gt;. &lt;b&gt;Accept Claim&lt;/b&gt; can happen only after &lt;b&gt;Start Claim&lt;/b&gt; had happened.</description><display>precedence</display><name>precedence</name><text> ( ! ("B" ) U "A" ) \/ ([](!("B"))) /\  ! ("B" );support;1.000000;confidence;1.000000;IF;0.958500</text><parameters><parameter branchable="true" id="1" name="A"><graphical><style number="1"/><begin fill="true" style="0"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter><parameter branchable="true" id="2" name="B"><graphical><style number="1"/><begin fill="true" style="10"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">&lt;html&gt;This constraint is satisfied because either: 
&lt;ul&gt;
&lt;li&gt;task &amp;quot;B&amp;quot; was never executed, or&lt;/li&gt;
&lt;li&gt;first task &amp;quot;A&amp;quot; was executed, and then task &amp;quot;B&amp;quot; was executed. &lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</message><message state="VIOLATED_TEMPORARY">&lt;html&gt;This should never happen!&lt;/html&gt;</message><message state="VIOLATED">&lt;html&gt;This constraint is violated because task &amp;quot;B&amp;quot; was executed before task &amp;quot;A&amp;quot;.&lt;/html&gt;</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Start Claim"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Accept Claim"/></branches></parameter></constraintparameters></constraint><constraint id="9" mandatory="true"><condition/><name>co-existence</name><template><description>If A happen (at least once) then B has to have (at least once) happpend before of has to happen after A. And vice versa.</description><display>co-existence</display><name>co-existence</name><text>( ( &lt;&gt;("A") -&gt; &lt;&gt;( "B" ) ) /\ ( &lt;&gt;("B") -&gt; &lt;&gt;( "A" ) )  );support;1.000000;confidence;0.958500;IF;0.918722</text><parameters><parameter branchable="true" id="1" name="A"><graphical><style number="1"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter><parameter branchable="true" id="2" name="B"><graphical><style number="1"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">SATISFIED undefined</message><message state="VIOLATED_TEMPORARY">VIOLATED_TEMPORARY undefined</message><message state="VIOLATED">VIOLATED undefined</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Execute Payment"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Accept Claim"/></branches></parameter></constraintparameters></constraint><constraint id="10" mandatory="true"><condition/><name>not succession</name><template><description>After A there cannot be eventually a B and Before B there cannot be an A</description><display>not succession</display><name>not succession</name><text>[]( ( "A" -&gt; !( &lt;&gt;( "B" ) ) ) );support;1.000000;confidence;0.958500;IF;0.918722</text><parameters><parameter branchable="false" id="1" name="A"><graphical><style number="1"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="8"/></graphical></parameter><parameter branchable="false" id="2" name="B"><graphical><style number="1"/><begin fill="true" style="10"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">SATISFIED undefined</message><message state="VIOLATED_TEMPORARY">VIOLATED_TEMPORARY undefined</message><message state="VIOLATED">VIOLATED undefined</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Execute Payment"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Accept Claim"/></branches></parameter></constraintparameters></constraint><constraint id="11" mandatory="true"><condition/><name>co-existence</name><template><description>If A happen (at least once) then B has to have (at least once) happpend before of has to happen after A. And vice versa.</description><display>co-existence</display><name>co-existence</name><text>( ( &lt;&gt;("A") -&gt; &lt;&gt;( "B" ) ) /\ ( &lt;&gt;("B") -&gt; &lt;&gt;( "A" ) )  );support;1.000000;confidence;0.958500;IF;0.918722</text><parameters><parameter branchable="true" id="1" name="A"><graphical><style number="1"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter><parameter branchable="true" id="2" name="B"><graphical><style number="1"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">SATISFIED undefined</message><message state="VIOLATED_TEMPORARY">VIOLATED_TEMPORARY undefined</message><message state="VIOLATED">VIOLATED undefined</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Execute Payment"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Payment Order"/></branches></parameter></constraintparameters></constraint><constraint id="12" mandatory="true"><condition/><name>not succession</name><template><description>After A there cannot be eventually a B and Before B there cannot be an A</description><display>not succession</display><name>not succession</name><text>[]( ( "A" -&gt; !( &lt;&gt;( "B" ) ) ) );support;1.000000;confidence;0.958500;IF;0.958500</text><parameters><parameter branchable="false" id="1" name="A"><graphical><style number="1"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="8"/></graphical></parameter><parameter branchable="false" id="2" name="B"><graphical><style number="1"/><begin fill="true" style="10"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">SATISFIED undefined</message><message state="VIOLATED_TEMPORARY">VIOLATED_TEMPORARY undefined</message><message state="VIOLATED">VIOLATED undefined</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Execute Payment"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Receive Claim"/></branches></parameter></constraintparameters></constraint><constraint id="13" mandatory="true"><condition/><name>not succession</name><template><description>After A there cannot be eventually a B and Before B there cannot be an A</description><display>not succession</display><name>not succession</name><text>[]( ( "A" -&gt; !( &lt;&gt;( "B" ) ) ) );support;1.000000;confidence;0.958500;IF;0.958500</text><parameters><parameter branchable="false" id="1" name="A"><graphical><style number="1"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="8"/></graphical></parameter><parameter branchable="false" id="2" name="B"><graphical><style number="1"/><begin fill="true" style="10"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">SATISFIED undefined</message><message state="VIOLATED_TEMPORARY">VIOLATED_TEMPORARY undefined</message><message state="VIOLATED">VIOLATED undefined</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Execute Payment"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Start Claim"/></branches></parameter></constraintparameters></constraint><constraint id="14" mandatory="true"><condition/><name>alternate precedence</name><template><description>B cannot happen before A. After it happens, it can not happen before the next A again.</description><display>alternate precedence</display><name>alternate precedence</name><text>(    ( !( "B" ) U "A" )  )  /\  ( ( "B" -&gt;  X(   ( !( "B" ) U "A" )       ) ) ) ) /\  ! ("B" );support;1.000000;confidence;0.958500;IF;0.918722</text><parameters><parameter branchable="true" id="1" name="A"><graphical><style number="2"/><begin fill="true" style="0"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter><parameter branchable="true" id="2" name="B"><graphical><style number="2"/><begin fill="true" style="10"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">SATISFIED undefined</message><message state="VIOLATED_TEMPORARY">VIOLATED_TEMPORARY undefined</message><message state="VIOLATED">VIOLATED undefined</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Payment Order"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Execute Payment"/></branches></parameter></constraintparameters></constraint><constraint id="15" mandatory="true"><condition/><name>precedence</name><template><description>&lt;b&gt;Execute Payment&lt;/b&gt; has to be preceded by &lt;b&gt;Receive Claim&lt;/b&gt;. &lt;b&gt;Execute Payment&lt;/b&gt; can happen only after &lt;b&gt;Receive Claim&lt;/b&gt; had happened.</description><display>precedence</display><name>precedence</name><text> ( ! ("B" ) U "A" ) \/ ([](!("B"))) /\  ! ("B" );support;1.000000;confidence;1.000000;IF;0.958500</text><parameters><parameter branchable="true" id="1" name="A"><graphical><style number="1"/><begin fill="true" style="0"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter><parameter branchable="true" id="2" name="B"><graphical><style number="1"/><begin fill="true" style="10"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">&lt;html&gt;This constraint is satisfied because either: 
&lt;ul&gt;
&lt;li&gt;task &amp;quot;B&amp;quot; was never executed, or&lt;/li&gt;
&lt;li&gt;first task &amp;quot;A&amp;quot; was executed, and then task &amp;quot;B&amp;quot; was executed. &lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</message><message state="VIOLATED_TEMPORARY">&lt;html&gt;This should never happen!&lt;/html&gt;</message><message state="VIOLATED">&lt;html&gt;This constraint is violated because task &amp;quot;B&amp;quot; was executed before task &amp;quot;A&amp;quot;.&lt;/html&gt;</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Receive Claim"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Execute Payment"/></branches></parameter></constraintparameters></constraint><constraint id="16" mandatory="true"><condition/><name>precedence</name><template><description>&lt;b&gt;Execute Payment&lt;/b&gt; has to be preceded by &lt;b&gt;Start Claim&lt;/b&gt;. &lt;b&gt;Execute Payment&lt;/b&gt; can happen only after &lt;b&gt;Start Claim&lt;/b&gt; had happened.</description><display>precedence</display><name>precedence</name><text> ( ! ("B" ) U "A" ) \/ ([](!("B"))) /\  ! ("B" );support;1.000000;confidence;1.000000;IF;0.958500</text><parameters><parameter branchable="true" id="1" name="A"><graphical><style number="1"/><begin fill="true" style="0"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter><parameter branchable="true" id="2" name="B"><graphical><style number="1"/><begin fill="true" style="10"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">&lt;html&gt;This constraint is satisfied because either: 
&lt;ul&gt;
&lt;li&gt;task &amp;quot;B&amp;quot; was never executed, or&lt;/li&gt;
&lt;li&gt;first task &amp;quot;A&amp;quot; was executed, and then task &amp;quot;B&amp;quot; was executed. &lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</message><message state="VIOLATED_TEMPORARY">&lt;html&gt;This should never happen!&lt;/html&gt;</message><message state="VIOLATED">&lt;html&gt;This constraint is violated because task &amp;quot;B&amp;quot; was executed before task &amp;quot;A&amp;quot;.&lt;/html&gt;</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Start Claim"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Execute Payment"/></branches></parameter></constraintparameters></constraint><constraint id="17" mandatory="true"><condition/><name>co-existence</name><template><description>If A happen (at least once) then B has to have (at least once) happpend before of has to happen after A. And vice versa.</description><display>co-existence</display><name>co-existence</name><text>( ( &lt;&gt;("A") -&gt; &lt;&gt;( "B" ) ) /\ ( &lt;&gt;("B") -&gt; &lt;&gt;( "A" ) )  );support;1.000000;confidence;0.958500;IF;0.918722</text><parameters><parameter branchable="true" id="1" name="A"><graphical><style number="1"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter><parameter branchable="true" id="2" name="B"><graphical><style number="1"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">SATISFIED undefined</message><message state="VIOLATED_TEMPORARY">VIOLATED_TEMPORARY undefined</message><message state="VIOLATED">VIOLATED undefined</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Payment Order"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Accept Claim"/></branches></parameter></constraintparameters></constraint><constraint id="18" mandatory="true"><condition/><name>not succession</name><template><description>After A there cannot be eventually a B and Before B there cannot be an A</description><display>not succession</display><name>not succession</name><text>[]( ( "A" -&gt; !( &lt;&gt;( "B" ) ) ) );support;1.000000;confidence;0.958500;IF;0.918722</text><parameters><parameter branchable="false" id="1" name="A"><graphical><style number="1"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="8"/></graphical></parameter><parameter branchable="false" id="2" name="B"><graphical><style number="1"/><begin fill="true" style="10"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">SATISFIED undefined</message><message state="VIOLATED_TEMPORARY">VIOLATED_TEMPORARY undefined</message><message state="VIOLATED">VIOLATED undefined</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Payment Order"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Accept Claim"/></branches></parameter></constraintparameters></constraint><constraint id="19" mandatory="true"><condition/><name>succession</name><template><description>response and precedence:
1. After every &lt;b&gt;Payment Order&lt;/b&gt; there has to be at least one &lt;b&gt;Execute Payment&lt;/b&gt;.
and
2. &lt;b&gt;Execute Payment&lt;/b&gt; has to be preceded by &lt;b&gt;Payment Order&lt;/b&gt;. &lt;b&gt;Execute Payment&lt;/b&gt; can happen only after &lt;b&gt;Payment Order&lt;/b&gt; had happened.</description><display>succession</display><name>succession</name><text>( []( ( "A" -&gt; &lt;&gt;( "B" ) ) ) /\      ((     ( !("B" ) U "A" )) \/ ([](!("B"))))       );support;1.000000;confidence;0.958500;IF;0.918722</text><parameters><parameter branchable="true" id="1" name="A"><graphical><style number="1"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter><parameter branchable="true" id="2" name="B"><graphical><style number="1"/><begin fill="true" style="10"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">&lt;html&gt;SATISFIED undefined&lt;/html&gt;</message><message state="VIOLATED_TEMPORARY">&lt;html&gt;VIOLATED_TEMPORARY undefined&lt;/html&gt;</message><message state="VIOLATED">&lt;html&gt;VIOLATED undefined&lt;/html&gt;</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Payment Order"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Execute Payment"/></branches></parameter></constraintparameters></constraint><constraint id="20" mandatory="true"><condition/><name>not succession</name><template><description>After A there cannot be eventually a B and Before B there cannot be an A</description><display>not succession</display><name>not succession</name><text>[]( ( "A" -&gt; !( &lt;&gt;( "B" ) ) ) );support;1.000000;confidence;0.958500;IF;0.958500</text><parameters><parameter branchable="false" id="1" name="A"><graphical><style number="1"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="8"/></graphical></parameter><parameter branchable="false" id="2" name="B"><graphical><style number="1"/><begin fill="true" style="10"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">SATISFIED undefined</message><message state="VIOLATED_TEMPORARY">VIOLATED_TEMPORARY undefined</message><message state="VIOLATED">VIOLATED undefined</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Payment Order"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Receive Claim"/></branches></parameter></constraintparameters></constraint><constraint id="21" mandatory="true"><condition/><name>not succession</name><template><description>After A there cannot be eventually a B and Before B there cannot be an A</description><display>not succession</display><name>not succession</name><text>[]( ( "A" -&gt; !( &lt;&gt;( "B" ) ) ) );support;1.000000;confidence;0.958500;IF;0.958500</text><parameters><parameter branchable="false" id="1" name="A"><graphical><style number="1"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="8"/></graphical></parameter><parameter branchable="false" id="2" name="B"><graphical><style number="1"/><begin fill="true" style="10"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">SATISFIED undefined</message><message state="VIOLATED_TEMPORARY">VIOLATED_TEMPORARY undefined</message><message state="VIOLATED">VIOLATED undefined</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Payment Order"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Start Claim"/></branches></parameter></constraintparameters></constraint><constraint id="22" mandatory="true"><condition/><name>precedence</name><template><description>&lt;b&gt;Payment Order&lt;/b&gt; has to be preceded by &lt;b&gt;Receive Claim&lt;/b&gt;. &lt;b&gt;Payment Order&lt;/b&gt; can happen only after &lt;b&gt;Receive Claim&lt;/b&gt; had happened.</description><display>precedence</display><name>precedence</name><text> ( ! ("B" ) U "A" ) \/ ([](!("B"))) /\  ! ("B" );support;1.000000;confidence;1.000000;IF;0.958500</text><parameters><parameter branchable="true" id="1" name="A"><graphical><style number="1"/><begin fill="true" style="0"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter><parameter branchable="true" id="2" name="B"><graphical><style number="1"/><begin fill="true" style="10"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">&lt;html&gt;This constraint is satisfied because either: 
&lt;ul&gt;
&lt;li&gt;task &amp;quot;B&amp;quot; was never executed, or&lt;/li&gt;
&lt;li&gt;first task &amp;quot;A&amp;quot; was executed, and then task &amp;quot;B&amp;quot; was executed. &lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</message><message state="VIOLATED_TEMPORARY">&lt;html&gt;This should never happen!&lt;/html&gt;</message><message state="VIOLATED">&lt;html&gt;This constraint is violated because task &amp;quot;B&amp;quot; was executed before task &amp;quot;A&amp;quot;.&lt;/html&gt;</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Receive Claim"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Payment Order"/></branches></parameter></constraintparameters></constraint><constraint id="23" mandatory="true"><condition/><name>precedence</name><template><description>&lt;b&gt;Payment Order&lt;/b&gt; has to be preceded by &lt;b&gt;Start Claim&lt;/b&gt;. &lt;b&gt;Payment Order&lt;/b&gt; can happen only after &lt;b&gt;Start Claim&lt;/b&gt; had happened.</description><display>precedence</display><name>precedence</name><text> ( ! ("B" ) U "A" ) \/ ([](!("B"))) /\  ! ("B" );support;1.000000;confidence;1.000000;IF;0.958500</text><parameters><parameter branchable="true" id="1" name="A"><graphical><style number="1"/><begin fill="true" style="0"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter><parameter branchable="true" id="2" name="B"><graphical><style number="1"/><begin fill="true" style="10"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">&lt;html&gt;This constraint is satisfied because either: 
&lt;ul&gt;
&lt;li&gt;task &amp;quot;B&amp;quot; was never executed, or&lt;/li&gt;
&lt;li&gt;first task &amp;quot;A&amp;quot; was executed, and then task &amp;quot;B&amp;quot; was executed. &lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</message><message state="VIOLATED_TEMPORARY">&lt;html&gt;This should never happen!&lt;/html&gt;</message><message state="VIOLATED">&lt;html&gt;This constraint is violated because task &amp;quot;B&amp;quot; was executed before task &amp;quot;A&amp;quot;.&lt;/html&gt;</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Start Claim"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Payment Order"/></branches></parameter></constraintparameters></constraint><constraint id="24" mandatory="true"><condition/><name>absence2</name><template><description>A can happen at most once.</description><display>0..1</display><name>absence2</name><text>! ( &lt;&gt; ( ( "A" /\ X(&lt;&gt;("A")) ) ) );support;1.000000;confidence;1.000000;IF;1.000000</text><parameters><parameter branchable="false" id="1" name="A"><graphical><style number="1"/><begin fill="false" style="0"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">SATISFIED undefined</message><message state="VIOLATED_TEMPORARY">VIOLATED_TEMPORARY undefined</message><message state="VIOLATED">VIOLATED undefined</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Receive Claim"/></branches></parameter></constraintparameters></constraint><constraint id="25" mandatory="true"><condition/><name>init</name><template><description>Each instance has to start with execution of &lt;b&gt;Receive Claim&lt;/b&gt;.</description><display>init</display><name>init</name><text>( ( "A.started" \/ "A.cancelled" ) W  "A" );support;1.000000;confidence;1.000000;IF;1.000000</text><parameters><parameter branchable="false" id="1" name="A"><graphical><style number="1"/><begin fill="false" style="0"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">&lt;html&gt;This constraint is satisfied because either:
&lt;ul&gt;
&lt;li&gt;none of the tasks in this instance were executed yet, or&lt;/li&gt;
&lt;li&gt;the first executed task is &amp;quot;A&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;&lt;/html&gt;</message><message state="VIOLATED_TEMPORARY">&lt;html&gt;This should never happen!&lt;/html&gt;</message><message state="VIOLATED">&lt;html&gt;This constraint is violated because the first executed task 
in this instance was not "A".  &lt;/html&gt;</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Receive Claim"/></branches></parameter></constraintparameters></constraint><constraint id="26" mandatory="true"><condition/><name>alternate response</name><template><description>After each A is executed at least one B is executed. Another A can be executed again only after the first B.</description><display>alternate response</display><name>alternate response</name><text>[]( ( "A" -&gt; X(( !("A") U "B" ))));support;0.958500;confidence;0.958500;IF;0.918722</text><parameters><parameter branchable="true" id="1" name="A"><graphical><style number="2"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter><parameter branchable="true" id="2" name="B"><graphical><style number="2"/><begin fill="true" style="2"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">SATISFIED undefined</message><message state="VIOLATED_TEMPORARY">VIOLATED_TEMPORARY undefined</message><message state="VIOLATED">VIOLATED undefined</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Receive Claim"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Accept Claim"/></branches></parameter></constraintparameters></constraint><constraint id="27" mandatory="true"><condition/><name>not chain succession</name><template><description>A and be can never be executed next to each other where A if executed first and B second.</description><display>not chain succession</display><name>not chain succession</name><text>[]( ( "A" -&gt; X( !( "B" ) ) ) );support;1.000000;confidence;0.958500;IF;0.958500</text><parameters><parameter branchable="false" id="1" name="A"><graphical><style number="3"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="8"/></graphical></parameter><parameter branchable="false" id="2" name="B"><graphical><style number="3"/><begin fill="true" style="10"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">SATISFIED undefined</message><message state="VIOLATED_TEMPORARY">VIOLATED_TEMPORARY undefined</message><message state="VIOLATED">VIOLATED undefined</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Receive Claim"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Accept Claim"/></branches></parameter></constraintparameters></constraint><constraint id="28" mandatory="true"><condition/><name>alternate response</name><template><description>After each A is executed at least one B is executed. Another A can be executed again only after the first B.</description><display>alternate response</display><name>alternate response</name><text>[]( ( "A" -&gt; X(( !("A") U "B" ))));support;0.958500;confidence;0.958500;IF;0.918722</text><parameters><parameter branchable="true" id="1" name="A"><graphical><style number="2"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter><parameter branchable="true" id="2" name="B"><graphical><style number="2"/><begin fill="true" style="2"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">SATISFIED undefined</message><message state="VIOLATED_TEMPORARY">VIOLATED_TEMPORARY undefined</message><message state="VIOLATED">VIOLATED undefined</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Receive Claim"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Execute Payment"/></branches></parameter></constraintparameters></constraint><constraint id="29" mandatory="true"><condition/><name>not chain succession</name><template><description>A and be can never be executed next to each other where A if executed first and B second.</description><display>not chain succession</display><name>not chain succession</name><text>[]( ( "A" -&gt; X( !( "B" ) ) ) );support;1.000000;confidence;0.958500;IF;0.958500</text><parameters><parameter branchable="false" id="1" name="A"><graphical><style number="3"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="8"/></graphical></parameter><parameter branchable="false" id="2" name="B"><graphical><style number="3"/><begin fill="true" style="10"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">SATISFIED undefined</message><message state="VIOLATED_TEMPORARY">VIOLATED_TEMPORARY undefined</message><message state="VIOLATED">VIOLATED undefined</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Receive Claim"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Execute Payment"/></branches></parameter></constraintparameters></constraint><constraint id="30" mandatory="true"><condition/><name>alternate response</name><template><description>After each A is executed at least one B is executed. Another A can be executed again only after the first B.</description><display>alternate response</display><name>alternate response</name><text>[]( ( "A" -&gt; X(( !("A") U "B" ))));support;0.958500;confidence;0.958500;IF;0.918722</text><parameters><parameter branchable="true" id="1" name="A"><graphical><style number="2"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter><parameter branchable="true" id="2" name="B"><graphical><style number="2"/><begin fill="true" style="2"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">SATISFIED undefined</message><message state="VIOLATED_TEMPORARY">VIOLATED_TEMPORARY undefined</message><message state="VIOLATED">VIOLATED undefined</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Receive Claim"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Payment Order"/></branches></parameter></constraintparameters></constraint><constraint id="31" mandatory="true"><condition/><name>not chain succession</name><template><description>A and be can never be executed next to each other where A if executed first and B second.</description><display>not chain succession</display><name>not chain succession</name><text>[]( ( "A" -&gt; X( !( "B" ) ) ) );support;1.000000;confidence;0.958500;IF;0.958500</text><parameters><parameter branchable="false" id="1" name="A"><graphical><style number="3"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="8"/></graphical></parameter><parameter branchable="false" id="2" name="B"><graphical><style number="3"/><begin fill="true" style="10"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">SATISFIED undefined</message><message state="VIOLATED_TEMPORARY">VIOLATED_TEMPORARY undefined</message><message state="VIOLATED">VIOLATED undefined</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Receive Claim"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Payment Order"/></branches></parameter></constraintparameters></constraint><constraint id="32" mandatory="true"><condition/><name>chain succession</name><template><description>A and B can happen only next to each other.</description><display>chain succession</display><name>chain succession</name><text>[](  ( "A" = X( "B" ) )  );support;1.000000;confidence;1.000000;IF;1.000000</text><parameters><parameter branchable="true" id="1" name="A"><graphical><style number="3"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter><parameter branchable="true" id="2" name="B"><graphical><style number="3"/><begin fill="true" style="10"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">SATISFIED undefined</message><message state="VIOLATED_TEMPORARY">VIOLATED_TEMPORARY undefined</message><message state="VIOLATED">VIOLATED undefined</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Receive Claim"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Start Claim"/></branches></parameter></constraintparameters></constraint><constraint id="33" mandatory="true"><condition/><name>absence2</name><template><description>A can happen at most once.</description><display>0..1</display><name>absence2</name><text>! ( &lt;&gt; ( ( "A" /\ X(&lt;&gt;("A")) ) ) );support;1.000000;confidence;1.000000;IF;1.000000</text><parameters><parameter branchable="false" id="1" name="A"><graphical><style number="1"/><begin fill="false" style="0"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">SATISFIED undefined</message><message state="VIOLATED_TEMPORARY">VIOLATED_TEMPORARY undefined</message><message state="VIOLATED">VIOLATED undefined</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Start Claim"/></branches></parameter></constraintparameters></constraint><constraint id="34" mandatory="true"><condition/><name>existence</name><template><description>&lt;b&gt;Start Claim&lt;/b&gt; has to be executed at least once.</description><display>1..*</display><name>existence</name><text>&lt;&gt; ( "A" );support;1.000000;confidence;1.000000;IF;1.000000</text><parameters><parameter branchable="false" id="1" name="A"><graphical><style number="1"/><begin fill="false" style="0"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">&lt;html&gt;Task &amp;quot;A&amp;quot; has been executed at least one before.&lt;/html&gt;</message><message state="VIOLATED_TEMPORARY">&lt;html&gt;
&lt;p&gt;Task &amp;quot;A&amp;quot; has not been executed yet. &lt;/p&gt;
&lt;p&gt;To satisfy this constraint you must execite task &amp;quot;A&amp;quot;.&lt;/p&gt;&lt;/html&gt;</message><message state="VIOLATED">&lt;html&gt;Task &amp;quot;A&amp;quot; has never been executed.&lt;/html&gt;</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Start Claim"/></branches></parameter></constraintparameters></constraint><constraint id="35" mandatory="true"><condition/><name>alternate response</name><template><description>After each A is executed at least one B is executed. Another A can be executed again only after the first B.</description><display>alternate response</display><name>alternate response</name><text>[]( ( "A" -&gt; X(( !("A") U "B" ))));support;0.958500;confidence;0.958500;IF;0.918722</text><parameters><parameter branchable="true" id="1" name="A"><graphical><style number="2"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter><parameter branchable="true" id="2" name="B"><graphical><style number="2"/><begin fill="true" style="2"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">SATISFIED undefined</message><message state="VIOLATED_TEMPORARY">VIOLATED_TEMPORARY undefined</message><message state="VIOLATED">VIOLATED undefined</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Start Claim"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Accept Claim"/></branches></parameter></constraintparameters></constraint><constraint id="36" mandatory="true"><condition/><name>alternate response</name><template><description>After each A is executed at least one B is executed. Another A can be executed again only after the first B.</description><display>alternate response</display><name>alternate response</name><text>[]( ( "A" -&gt; X(( !("A") U "B" ))));support;0.958500;confidence;0.958500;IF;0.918722</text><parameters><parameter branchable="true" id="1" name="A"><graphical><style number="2"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter><parameter branchable="true" id="2" name="B"><graphical><style number="2"/><begin fill="true" style="2"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">SATISFIED undefined</message><message state="VIOLATED_TEMPORARY">VIOLATED_TEMPORARY undefined</message><message state="VIOLATED">VIOLATED undefined</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Start Claim"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Execute Payment"/></branches></parameter></constraintparameters></constraint><constraint id="37" mandatory="true"><condition/><name>not chain succession</name><template><description>A and be can never be executed next to each other where A if executed first and B second.</description><display>not chain succession</display><name>not chain succession</name><text>[]( ( "A" -&gt; X( !( "B" ) ) ) );support;1.000000;confidence;0.958500;IF;0.958500</text><parameters><parameter branchable="false" id="1" name="A"><graphical><style number="3"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="8"/></graphical></parameter><parameter branchable="false" id="2" name="B"><graphical><style number="3"/><begin fill="true" style="10"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">SATISFIED undefined</message><message state="VIOLATED_TEMPORARY">VIOLATED_TEMPORARY undefined</message><message state="VIOLATED">VIOLATED undefined</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Start Claim"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Execute Payment"/></branches></parameter></constraintparameters></constraint><constraint id="38" mandatory="true"><condition/><name>alternate response</name><template><description>After each A is executed at least one B is executed. Another A can be executed again only after the first B.</description><display>alternate response</display><name>alternate response</name><text>[]( ( "A" -&gt; X(( !("A") U "B" ))));support;0.958500;confidence;0.958500;IF;0.918722</text><parameters><parameter branchable="true" id="1" name="A"><graphical><style number="2"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter><parameter branchable="true" id="2" name="B"><graphical><style number="2"/><begin fill="true" style="2"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">SATISFIED undefined</message><message state="VIOLATED_TEMPORARY">VIOLATED_TEMPORARY undefined</message><message state="VIOLATED">VIOLATED undefined</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Start Claim"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Payment Order"/></branches></parameter></constraintparameters></constraint><constraint id="39" mandatory="true"><condition/><name>not chain succession</name><template><description>A and be can never be executed next to each other where A if executed first and B second.</description><display>not chain succession</display><name>not chain succession</name><text>[]( ( "A" -&gt; X( !( "B" ) ) ) );support;1.000000;confidence;0.958500;IF;0.958500</text><parameters><parameter branchable="false" id="1" name="A"><graphical><style number="3"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="8"/></graphical></parameter><parameter branchable="false" id="2" name="B"><graphical><style number="3"/><begin fill="true" style="10"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">SATISFIED undefined</message><message state="VIOLATED_TEMPORARY">VIOLATED_TEMPORARY undefined</message><message state="VIOLATED">VIOLATED undefined</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Start Claim"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Payment Order"/></branches></parameter></constraintparameters></constraint><constraint id="40" mandatory="true"><condition/><name>co-existence</name><template><description>If A happen (at least once) then B has to have (at least once) happpend before of has to happen after A. And vice versa.</description><display>co-existence</display><name>co-existence</name><text>( ( &lt;&gt;("A") -&gt; &lt;&gt;( "B" ) ) /\ ( &lt;&gt;("B") -&gt; &lt;&gt;( "A" ) )  );support;1.000000;confidence;1.000000;IF;1.000000</text><parameters><parameter branchable="true" id="1" name="A"><graphical><style number="1"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter><parameter branchable="true" id="2" name="B"><graphical><style number="1"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">SATISFIED undefined</message><message state="VIOLATED_TEMPORARY">VIOLATED_TEMPORARY undefined</message><message state="VIOLATED">VIOLATED undefined</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Start Claim"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Receive Claim"/></branches></parameter></constraintparameters></constraint><constraint id="41" mandatory="true"><condition/><name>not succession</name><template><description>After A there cannot be eventually a B and Before B there cannot be an A</description><display>not succession</display><name>not succession</name><text>[]( ( "A" -&gt; !( &lt;&gt;( "B" ) ) ) );support;1.000000;confidence;1.000000;IF;1.000000</text><parameters><parameter branchable="false" id="1" name="A"><graphical><style number="1"/><begin fill="true" style="5"/><middle fill="false" style="0"/><end fill="false" style="8"/></graphical></parameter><parameter branchable="false" id="2" name="B"><graphical><style number="1"/><begin fill="true" style="10"/><middle fill="false" style="0"/><end fill="false" style="0"/></graphical></parameter></parameters><statemessages><message state="SATISFIED">SATISFIED undefined</message><message state="VIOLATED_TEMPORARY">VIOLATED_TEMPORARY undefined</message><message state="VIOLATED">VIOLATED undefined</message></statemessages></template><constraintparameters><parameter templateparameter="1"><branches><branch name="Start Claim"/></branches></parameter><parameter templateparameter="2"><branches><branch name="Receive Claim"/></branches></parameter></constraintparameters></constraint></constraintdefinitions><graphical><activities><cell height="50.0" id="65" width="90.0" x="401.8870384018589" y="17.645987501866216"/><cell height="50.0" id="66" width="90.0" x="10.0" y="10.0"/><cell height="50.0" id="67" width="90.0" x="10.0" y="10.0"/><cell height="50.0" id="68" width="90.0" x="10.0" y="10.0"/><cell height="50.0" id="69" width="90.0" x="10.0" y="10.0"/><cell height="50.0" id="70" width="90.0" x="299.57685323230913" y="17.645987501866216"/><cell height="50.0" id="71" width="90.0" x="217.19106415503165" y="17.645987501866216"/><cell height="50.0" id="72" width="90.0" x="150.71660398548192" y="17.645987501866216"/><cell height="50.0" id="73" width="90.0" x="10.0" y="10.0"/><cell height="50.0" id="74" width="90.0" x="10.0" y="10.0"/><cell height="50.0" id="75" width="90.0" x="10.0" y="10.0"/><cell height="50.0" id="76" width="90.0" x="10.0" y="10.0"/><cell height="50.0" id="77" width="90.0" x="71.78595443392967" y="17.645987501866216"/><cell height="50.0" id="78" width="90.0" x="10.0" y="10.0"/><cell height="50.0" id="79" width="90.0" x="10.0" y="10.0"/><cell height="50.0" id="80" width="90.0" x="10.0" y="10.0"/></activities><constraints><cell height="1.0" id="2" width="1.0" x="561.472713555237" y="182.85841208819448"/><cell height="1.0" id="3" width="1.0" x="512.3139292348086" y="179.28500776776613"/><cell height="1.0" id="4" width="1.0" x="501.38568397342334" y="253.95633914205882"/><cell height="1.0" id="5" width="1.0" x="464.60697913658555" y="189.4414155470341"/><cell height="1.0" id="6" width="1.0" x="442.3642255008873" y="231.13728358907264"/><cell height="1.0" id="7" width="1.0" x="320.1545592274205" y="252.5073116820051"/><cell height="1.0" id="8" width="1.0" x="324.8471000487296" y="302.9453774571312"/><cell height="1.0" id="9" width="1.0" x="388.0399759197439" y="219.97150210331517"/><cell height="1.0" id="10" width="1.0" x="427.80340992140043" y="146.321430629039"/><cell height="1.0" id="11" width="1.0" x="378.84014327193825" y="279.6232282210463"/><cell height="1.0" id="12" width="1.0" x="282.5516678836539" y="287.7461385443654"/><cell height="1.0" id="13" width="1.0" x="217.3414254872166" y="383.64676915302726"/><cell height="1.0" id="14" width="1.0" x="256.1616768150811" y="329.0875719851877"/><cell height="1.0" id="15" width="1.0" x="33.81138217669593" y="222.80127196720315"/><cell height="1.0" id="16" width="1.0" x="90.96740309240312" y="217.30264781132203"/><cell height="1.0" id="17" width="1.0" x="56.789548253499134" y="67.4139980130893"/><cell height="1.0" id="18" width="1.0" x="342.3564619463475" y="140.01244178652877"/><cell height="1.0" id="19" width="1.0" x="319.7933409864414" y="206.29637536070112"/><cell height="1.0" id="20" width="1.0" x="201.60302529952594" y="255.63600120278647"/><cell height="1.0" id="21" width="1.0" x="173.83909801339766" y="285.45251109393985"/><cell height="1.0" id="22" width="1.0" x="239.80598308793543" y="285.27391128513824"/><cell height="1.0" id="23" width="1.0" x="119.83028481085533" y="313.4185030995072"/><cell height="1.0" id="26" width="1.0" x="131.8729175208409" y="382.9203043289044"/><cell height="1.0" id="27" width="1.0" x="51.839686863534595" y="316.60638504365517"/><cell height="1.0" id="28" width="1.0" x="2.5" y="319.8677501603625"/><cell height="1.0" id="29" width="1.0" x="108.53675169571437" y="294.02928415845037"/><cell height="1.0" id="30" width="1.0" x="219.8566007451151" y="315.7116595420641"/><cell height="1.0" id="31" width="1.0" x="123.5166319063087" y="348.2238004101721"/><cell height="1.0" id="32" width="1.0" x="52.63920859754717" y="358.8651054284782"/><cell height="1.0" id="35" width="1.0" x="109.80426029165585" y="257.9614215665242"/><cell height="1.0" id="36" width="1.0" x="126.95625670237956" y="156.55936476189672"/><cell height="1.0" id="37" width="1.0" x="41.06345572537975" y="159.58188367922824"/><cell height="1.0" id="38" width="1.0" x="10.384346101789337" y="33.141103541188016"/><cell height="1.0" id="39" width="1.0" x="73.18150233166685" y="2.499999999999999"/><cell height="1.0" id="40" width="1.0" x="39.612586088721855" y="14.493581182383673"/><cell height="1.0" id="41" width="1.0" x="13.393905668866076" y="57.84380650434107"/></constraints></graphical></assignment></model>